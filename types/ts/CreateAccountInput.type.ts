export interface CreateAccountInput {
    associated_entities?: AssociatedEntities;
    cycle_type?:          CycleType;
    discounts?:           Discounts;
    /**
     * The `Date-Time` as of which this account is effective on the server.
     */
    effective_at?: string;
    /**
     * Note: The value passed here *must* be unique. This ties to a reference of your account in
     * an external system. For example, you may have a ten digit loan number you use to
     * reference the account.
     */
    external_account_id?: string;
    /**
     * External fields can be used to relate accounts created in Canopy to entities in your or
     * any external system.
     */
    external_fields?: ExternalField[];
    /**
     * Note: The value passed here *must* be unique. A unique external ID that may be used
     * interchangeably with the Canopy-generated product ID. Either external ID or Canopy
     * product ID must be passed at the time of account creation.
     */
    external_product_id?:      string;
    payment_processor_config?: PaymentProcessorConfig;
    post_promo_overview?:      PostPromoOverview;
    /**
     * A unique product ID generated by Canopy.
     */
    product_id?:     string;
    promo_overview?: PromoOverview;
    summary?:        Summary;
    /**
     * Array of existing customer IDs to be added to the account. At least one existing *OR* one
     * new customer must be included in account creation.
     */
    assign_customers?: AssignCustomer[];
}

export interface AssignCustomer {
    /**
     * A unique number for the customer on the account. For instance, a credit card number. If
     * none is provided, a Canopy-generated ID can be used.
     */
    customer_account_external_id?:             string;
    customer_account_issuer_processor_config?: CustomerAccountIssuerProcessorConfig;
    /**
     * The role of the customer for the account.
     */
    customer_account_role?: CustomerAccountRole;
    /**
     * A unique account ID generated by Canopy.
     */
    customer_id: string;
}

export interface CustomerAccountIssuerProcessorConfig {
    lithic?: Lithic;
}

export interface Lithic {
    /**
     * Token belonging to the card program under which to create the card.
     */
    card_program_token?: string;
    /**
     * Friendly name to identify the card
     */
    memo?: string;
    /**
     * The state of the new card
     */
    state?: State;
    /**
     * The type of card created by Lithic
     */
    type?: Type;
}

/**
 * The state of the new card
 */
export type State = 
    "OPEN" | 
    "PAUSED";

/**
 * The type of card created by Lithic
 */
export type Type = 
    "MERCHANT_LOCKED" | 
    "SINGLE_USE" | 
    "UNLOCKED";

/**
 * The role of the customer for the account.
 */
export type CustomerAccountRole = 
    "PRIMARY" | 
    "SECONDARY";

export interface AssociatedEntities {
    /**
     * A lender name associated with the account
     */
    lender_name?: string;
    /**
     * A merchant name associated with the account
     */
    merchant_name?: string;
}

export interface CycleType {
    /**
     * Interval for a first cycle for this account.
     */
    first_cycle_interval?: string;
}

export interface Discounts {
    prepayment_discount_config?: PrepaymentDiscountConfig;
}

export interface PrepaymentDiscountConfig {
    /**
     * The `Date-Time` that this discount is valid.
     */
    loan_discount_at?: string;
    /**
     * Loan discount amount in cents.
     */
    loan_discount_cents?: number;
}

export interface ExternalField {
    /**
     * key: i.e. Name of the External Party
     */
    key?: string;
    /**
     * value: i.e. External Account ID
     */
    value?: string;
}

export interface PaymentProcessorConfig {
    /**
     * ACH processing configuration.
     */
    ach?: Ach;
    /**
     * Indicates whether autopay is enabled for this account. Currently, autopay is triggered 1
     * day prior to a payment due date. If `default_payment_processor` is set to `NONE`, autopay
     * will not be triggered for account regardless of this field's value.
     */
    autopay_enabled?: boolean;
    /**
     * Debit processing configuration.
     */
    debit_card?: DebitCard;
    /**
     * Configures the payment processor to be used for manual or autopay payments. This cannot
     * be set to a value different from `NONE` if no valid ACH or Debit Card configs are
     * provided.
     */
    default_payment_processor_method?: DefaultPaymentProcessorMethod;
}

/**
 * ACH processing configuration.
 */
export interface Ach {
    /**
     * Dwolla account verified and tokenized using Plaid.
     */
    dwolla_config?: DwollaConfig;
    /**
     * Sensitive bank information will be stored as a secured token for payments in place of the
     * raw account details.
     */
    modern_treasury_config?: ModernTreasuryConfig;
    /**
     * Indicates the active payment processor whose configuration will be used for ACH/Debit
     * card payments made from the account.
     */
    payment_processor_name: AchPaymentProcessorName;
    /**
     * Sensitive bank information will be stored as a secured token for payments in place of the
     * raw account details.
     */
    repay_config?: AchRepayConfig;
}

/**
 * Dwolla account verified and tokenized using Plaid.
 */
export interface DwollaConfig {
    /**
     * Plaid token generated for processing by Dwolla.
     */
    dwolla_plaid_token: string;
}

/**
 * Sensitive bank information will be stored as a secured token for payments in place of the
 * raw account details.
 */
export interface ModernTreasuryConfig {
    /**
     * Account number is an eight to ten digit number that identifies a specific account.
     */
    account_number: string;
    /**
     * Type of account: Savings or Checking.
     */
    account_type: AccountType;
    /**
     * Account holder's name as it appears on the account.
     */
    name_on_check: string;
    /**
     * Routing number is a nine-digit code based on the U.S. Bank location where your account
     * was opened.
     */
    routing_number: string;
}

/**
 * Type of account: Savings or Checking.
 */
export type AccountType = 
    "CHECKING" | 
    "SAVINGS";

/**
 * Indicates the active payment processor whose configuration will be used for ACH/Debit
 * card payments made from the account.
 */
export type AchPaymentProcessorName = 
    "DWOLLA" | 
    "MODERN_TREASURY" | 
    "NONE" | 
    "REPAY";

/**
 * Sensitive bank information will be stored as a secured token for payments in place of the
 * raw account details.
 */
export interface AchRepayConfig {
    /**
     * Account number is an eight to ten digit number that identifies a specific account.
     */
    repay_account_number: string;
    /**
     * Type of account: Savings or Checking.
     */
    repay_account_type: AccountType;
    /**
     * Type of checking account: Personal or Business.
     */
    repay_check_type: RepayCheckType;
    /**
     * Account holder's name as it appears on the account.
     */
    repay_name_on_check: string;
    /**
     * Transit number is a nine-digit code based on the U.S. Bank location where your account
     * was opened.
     */
    repay_transit_number: string;
}

/**
 * Type of checking account: Personal or Business.
 */
export type RepayCheckType = 
    "BUSINESS" | 
    "PERSONAL";

/**
 * Debit processing configuration.
 */
export interface DebitCard {
    /**
     * Indicates the active payment processor whose configuration will be used for payments made
     * from the account. If `NONE`, Canopy will not trigger payments to an external payment
     * processor when they occur.
     */
    payment_processor_name: DebitCardPaymentProcessorName;
    /**
     * Sensitive debit card information will be stored as a secured token for payments in place
     * of the raw account details.
     */
    repay_config?: DebitCardRepayConfig;
}

/**
 * Indicates the active payment processor whose configuration will be used for payments made
 * from the account. If `NONE`, Canopy will not trigger payments to an external payment
 * processor when they occur.
 */
export type DebitCardPaymentProcessorName = 
    "NONE" | 
    "REPAY";

/**
 * Sensitive debit card information will be stored as a secured token for payments in place
 * of the raw account details.
 */
export interface DebitCardRepayConfig {
    /**
     * 16 digit debit card number.
     */
    repay_card_number: string;
    /**
     * The card expiration date in the format MMYY.
     */
    repay_exp_date: string;
    /**
     * The card holder's name as it appears on the card.
     */
    repay_name_on_card: string;
    /**
     * The card holder's billing street address.
     */
    repay_street: string;
    /**
     * The card holder's billing zip code.
     */
    repay_zip: string;
}

/**
 * Configures the payment processor to be used for manual or autopay payments. This cannot
 * be set to a value different from `NONE` if no valid ACH or Debit Card configs are
 * provided.
 */
export type DefaultPaymentProcessorMethod = 
    "ACH" | 
    "DEBIT_CARD" | 
    "NONE";

export interface PostPromoOverview {
    /**
     * The percentage interest applied to the account during the post-promotional period (e.g.
     * 6.2)
     */
    post_promo_impl_interest_rate_percent?: number;
    /**
     * If applicable, post-promotional amortization length in cycles.
     */
    post_promo_len?: number;
}

export interface PromoOverview {
    /**
     * The percentage interest applied to the account during the promotional period (e.g. 6.2)
     */
    promo_impl_interest_rate_percent?: number;
}

export interface Summary {
    /**
     * An annual fee to be charged yearly from the date of account creation. It will reflect on
     * the subsequent statement once incurred.
     */
    annual_fee_cents?: number;
    /**
     * Total amount (in cents) that this account can borrow.
     */
    credit_limit_cents?: number;
    /**
     * The initial principal balance (in cents) for the account.
     */
    initial_principal_cents?: number;
    /**
     * The fee charged for late payments on the account.
     */
    late_fee_cents?: number;
    /**
     * Total amount (in cents) that this account can borrow.
     */
    max_approved_credit_limit_cents?: number;
    /**
     * A monthly fee to be charged monthly from the date of account creation. It will reflect on
     * the subsequent statement once incurred.
     */
    monthly_fee_cents?: number;
    /**
     * The fee charged at the time of account origination
     */
    origination_fee_cents?: number;
    /**
     * The fee charged for payment reversals on the account.
     */
    payment_reversal_fee_cents?: number;
}
