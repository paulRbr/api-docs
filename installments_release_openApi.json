{
  "openapi": "3.0.0",
  "info": {
    "title": "Canopy Servicing Core API",
    "description": "**API Overview** \n Canopy allows you to easily manage credit products from a servicing and compliance perspective - whether newly launched or migrated from existing systems. Using Canopy, you can track balances and transactions for each customer of your product, both in real-time and historically. You can access and track information related to disputes, see how various policy and product changes would impact your customers, and readily generate compliance reports and minimize your risk with all real-time information always on hand. \n \n Simply configure your productâ€™s policies through our [Policy Management Dashboard](https://admin.canopyservicing.com), and then you can immediately begin adding customer accounts and relying on Canopy for accurate servicing information.",
    "termsOfService": "https://api.canopyservicing.com/terms/",
    "contact": {
      "email": "will@canopyservicing.com"
    },
    "version": "1.3"
	},
	"x-topics": [
		{
			"title": "Getting Started",
			"content": "*Get started in four easy steps.* \n \n 1) Review the [Authentication](https://docs.canopyservicing.com/#topic-authentication) section to connect and experiment with our Sandbox environment. \n \n 2) [Contact us](mailto:anurag@canopyservicing.com?subject=API%20Access%20Request) to request Production API Keys and learn more about our business. \n \n 3) Configure policies \n &nbsp; &nbsp; &nbsp; a) For most uses, we recommend using the [Policy Management Dashboard](https://admin.canopyservicing.com) \n &nbsp; &nbsp; &nbsp; b) If you will be configuring many credit products programmatically or require niche configurations, you can also configure products in Canopy directly through our Policy Management API. \n \n 4) Once your product is configured and launched in Canopy, you have access to the full power of the Servicing API! You can take advantage of sample workflows provided by our team, or construct your own using this API documentation."
		},
		{
			"title": "Authentication",
			"content": "**Sandbox** \n \n To Authenticate to our Sandbox environment, no prior contact with our team is required (though we'd certainly love to connect!). Simply make an unauthenticated `POST` request to `https://sandbox.canopyservicing.com/users`. The response body returns a unique `api_user_id`. \n \n For any subsequent calls to our API, include a header `x-api-key` whose value is this unique `api_user_id` as part of your request. This lets us know that you are submitting a valid Sandbox request and grants you access to our entire Sandbox API. \n \n **Production** \n \n To request production credentials, [contact our team](mailto:anurag@canopyservicing.com)."
		}
	],
  "servers": [
    {
      "url": "https://sandbox.canopyservicing.com",
      "description": "Sandbox"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "authentication",
      "description": "Authenticate to use the appropriate environment (sandbox or production) within Canopy"
    },
    {
      "name": "products",
      "description": "Create and launch credit products within the Canopy system."
    },
    {
      "name": "customers",
      "description": "Onboard customers into your system, so they can begin using your credit products"
    },
    {
      "name": "accounts",
      "description": "Manage the way your users use credit products you've launched in Canopy"
    },
    {
      "name": "line_items",
      "description": "Manage individual line items for your customers in Canopy."
    },
    {
      "name": "statements",
      "description": "Generate per billing cycle statements for your accounts in Canopy."
    },
    {
      "name": "notes",
      "description": "Help your customer service team track its activity across accounts."
    },
    {
      "name": "notifications",
      "description": "Help your customer service team keep track of its todos."
    },
    {
      "name": "installment_loans",
      "description": "Track amortization schedules or loan information for your loans."
    }
  ],
  "paths": {
    "/api_users": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Invite a new API user to Canopy",
        "operationId": "createApiUser",
        "description": "When you create a new API user via this `POST` request, an email invite will be sent for the new user to join your organization. The email invite includes a link with a unique token that will allow the new user to register to join your team in Canopy.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateApiUser"
          }
        }
      },
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "authentication"
        ],
        "summary": "Get all API users in your organization",
        "description": "Returns a list of all API users in your organization.",
        "operationId": "getApiUsers",
        "parameters": [
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApiUsers"
          },
          "404": {
            "description": "No Api Users found"
          }
        }
      }
    },
    "/api_users/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Log in as an API user",
        "operationId": "logInApiUser",
        "description": "When provided appropriate credentials, this route signs in an API user.",
        "requestBody": {
          "$ref": "#/components/requestBodies/LogInApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogInApiUser"
          }
        }
      }
    },
    "/api_users/password": {
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "Update the password for an API User",
        "operationId": "updateApiUserPassword",
        "description": "When provided appropriate credentials, this route changes an API User's password.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateApiUserPassword"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateApiUserPassword"
          }
        }
      }
    },
    "/api_users/summary": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "authentication"
        ],
        "summary": "Get summary info for an API user",
        "description": "Get all summarized information pertaining to the API user making the request.",
        "operationId": "getApiUser",
        "parameters": [
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the api user's info was as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApiUser"
          },
          "404": {
            "description": "No Products"
          }
        }
      }
    },
    "/api_users/register": {
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "Complete registration for an invited API user",
        "operationId": "registerApiUserPassword",
        "description": "When provided appropriate credentials, this route updates an API user's information for registration.",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegisterApiUser"
          }
        }
      }
    },
		"/customer_accounts": {
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get all accounts for all customers",
        "description": "Returns all accounts from the perspective of each customer. For instance, if one account has two customers, these are reflected as two separate items in the response array. Similarly, if one customer has multiple accounts, each account is reflected as a separate item in the response array.",
        "operationId": "getCustomersAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          },
					{
						"name": "search_query",
						"in": "query",
						"description": "A search query to be applied to results before the customer accounts list is returned. Search by name, phone number, account ID, or SSN last-four digits.",
						"required": false,
						"style": "form",
						"example": true,
						"schema": {
							"type": "string",
							"example": "Coco Parker"
						}
					},
					{
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the customers were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomerAccount"
          },
          "404": {
            "description": "Unable to get customers"
          }
        }
      }
		},
    "/customers": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "Create a new customer",
        "operationId": "CreateCustomer",
        "description": "Customer can be created within Canopy with attached data managed in a secure and compliant way to facilitate providing the best service for products created through Canopy.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCustomer"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateCustomer"
          }
        }
      },
      "get": {
        "tags": [
          "customers"
        ],
        "summary": "Get all customers",
        "description": "Returns all of your customers. Results are paginated.",
        "operationId": "getCustomers",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          },
					{
						"name": "search_query",
						"in": "query",
						"description": "A search query to be applied to results before the customers list is returned. Search by name, phone number, or SSN last-four digits.",
						"required": false,
						"style": "form",
						"example": true,
						"schema": {
							"type": "string",
							"example": "Coco Parker"
						}
					},
					{
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the customers were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Customers"
          },
          "404": {
            "description": "Unable to get customers"
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "customers"
        ],
        "summary": "Update an existing customer",
        "operationId": "UpdateCustomer",
        "description": "Update data for a customer in Canopy.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "path",
            "description": "The ID of the customer to be updated.",
            "required": true,
            "style": "simple",
            "explode": true,
            "schema": {
              "type": "string",
							"format": "uuid",
              "example": "975d11ab-92d3-489e-9aa5-8d0277b0222a"
            }
          }
				],
				"requestBody": {
          "$ref": "#/components/requestBodies/UpdateCustomer"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/UpdateCustomer"
          }
        }
      },
			"get": {
				"tags": [
          "customers"
        ],
        "summary": "Get a specific customer",
        "description": "Returns summary information for a specific customer.",
        "operationId": "getCustomer",
        "parameters": [
					{
						"name": "customer_id",
						"in": "path",
						"description": "The ID of the customer to return.",
						"required": true,
						"style": "simple",
						"example": true,
						"schema": {
							"type": "string",
							"example": "Coco Parker"
						}
					}
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Customer"
          },
          "404": {
            "description": "Unable to get customer"
          }
        }
			}
    },
    "/products": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "description": "At its core, Canopy allows you to create credit products that meet the specific needs of your customers. We offer robust options to configure these products within our system. \n \n For most use cases, we recommend configuring products by using the [Policy Management Dashboard](https://canopyservicing.com); however, you can also configure and manage products programmatically. \n \n Request body for creating a new product. \n \n The following fields are minimum requirements for products to be published with the `live` status: \n - `name` \n - `default_rate` \n - `default_credit_limit_cents` \n `policies` (with an appropriate Base Policy Configuration)",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateProduct"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "products"
        ],
        "summary": "Get all available products",
        "description": "If you have configured and launched multiple products within Canopy, retrieve information related to all of your configured products at once.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Products"
          },
          "404": {
            "description": "No Products"
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get info on a particular product",
        "operationId": "getProduct",
        "description": "Using the `product_id` which was generated when the product was launched, retrieve information pertaining to a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the Products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "No Products found"
          }
        }
      }
    },
    "/products/{product_id}/accounts": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get all accounts created under a specific product",
        "description": "Returns all accounts created under a specific product. Results are paginated.",
        "operationId": "getProductAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductAccounts"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/products/{product_id}/summaries": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get summary details for a specific product.",
        "description": "For analytic purposes, retrieve commonly needed summary statistics computed for a specific product.",
        "operationId": "getProductSummary",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the product summary information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProductSummary"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Get all available Accounts",
        "description": "Get details for all accounts linked to any of your products. Results are sorted by the date the account was created.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Accounts"
          },
          "404": {
            "description": "No accounts found"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Create a new account",
        "description": "An account should be created for each end customer of each of your products. Once created, you will be able to add `line_items` to the account.",
        "operationId": "createAccount",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateAccount"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateAccount"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get a specific Account",
        "description": "",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a361c813-92e5-4765-82ea-9df368a81a89"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
		"/accounts/{account_id}/notes": {
			"post": {
				"tags": [
          "notes"
        ],
        "summary": "Create a note for a specific account.",
        "description": "A note to be added to the account.",
				"operationId": "createAccountNote",
				"parameters": [
					{
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
				],
				"requestBody": {
					"description": "Add a Note to an account",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"message": {
										"type": "string",
										"description": "The contents of the note.",
										"example": "Attempted to call back customer, but no response."
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"$ref": "#/components/responses/CreateNote"
					}
				}
      },
      "get": {
        "tags": [
          "notes"
        ],
        "summary": "Get All Notes for a specific Account",
        "description": "",
        "operationId": "getNotes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a361c813-92e5-4765-82ea-9df368a81a89"
            }
					},
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
					"200": {
						"$ref": "#/components/responses/AccountNoteHistory"
					},
          "404": {
            "description": "Account not found"
          }
        }
			}
		},
    "/accounts/{account_id}/line_items": {
      "get": {
        "tags": [
          "line_items"
        ],
        "summary": "Get line items for a specific account.",
        "description": "Line Items for an Account consist of `charges` to the account and `payments` by the account holder. Results are paginated and sorted by line item effective date.",
        "operationId": "getAccountLineItems",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the line items were on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "line_item_type",
            "in": "query",
            "description": "The type of line items you would like to view. Options are `charges` and `payments`. If not provided, no filters will be applied.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "charges"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated line item requests sorted by line item effective date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LineItems"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/installment_loans": {
      "post": {
        "tags": [
          "installment_loans"
        ],
        "summary": "Create an installment loan for a specific account",
        "description": "",
        "operationId": "createInstallmentLoan",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateInstallmentLoan"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateInstallmentLoan"
          },
          "401": {
            "description": "You are not authenticated"
          },
          "403": {
            "description": "You are not authorized"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "get": {
        "tags": [
          "installment_loans"
        ],
        "summary": "Get installment loans for a specific account.",
        "description": "An installment loans account may have more than one installment loan on it.",
        "operationId": "getAccountInstallmentLoans",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the line items were on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated line item requests sorted by line item effective date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/InstallmentLoans"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/installment_loans/{loan_id}": {
      "get": {
        "tags": [
          "installment_loans"
        ],
        "summary": "Get information on a specific installment loan for a specific account",
        "description": "",
        "operationId": "getAccountInstallmentLoan",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "17d25206-1012-4576-89f0-c5fe128edd3e"
            }
          },
          {
            "name": "loan_id",
            "in": "path",
            "description": "Loan ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "8f0a3e81-24b9-4d32-b15b-a59257ed7485"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/InstallmentLoan"
          }
        }
      }
    },
    "/accounts/{account_id}/{loan_id}/amortization_schedule": {
      "get": {
        "tags": [
          "installment_loans"
        ],
        "summary": "Get the amortization schedule for a specific loan",
        "description": "",
        "operationId": "getAmortizationSchedule",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "17d25206-1012-4576-89f0-c5fe128edd3e"
            }
          },
          {
            "name": "loan_id",
            "in": "path",
            "description": "Loan ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "bd142b24-74e2-40e1-a583-fddc5c3f88d8"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated line item requests sorted by line item effective date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/AmortizationSchedule"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/{line_item_id}": {
      "get": {
        "tags": [
          "line_items"
        ],
        "summary": "Get information on a specific line item for a specific account",
        "description": "",
        "operationId": "getAccountLineItem",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "17d25206-1012-4576-89f0-c5fe128edd3e"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "8f0a3e81-24b9-4d32-b15b-a59257ed7485"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/LineItem"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/charges": {
      "post": {
        "tags": [
          "line_items"
        ],
        "summary": "Create a charge for a specific account",
        "description": "",
        "operationId": "createAccountCharge",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCharge"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateCharge"
          },
          "401": {
            "description": "You are not authenticated"
          },
          "403": {
            "description": "You are not authorized"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/payments": {
      "post": {
        "tags": [
          "line_items"
        ],
        "summary": "Create a payment for a specific account",
        "description": "",
        "operationId": "createAccountPayment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePayment"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreatePayment"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/payments/multipayments/installment_loans": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "line_items"
        ],
        "parameters": [
					{
            "name": "customer_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
				],
        "summary": "Allocate a payment across all installment loans on an account",
        "operationId": "PayInstallmentLoansByCustomer",
        "description": "Utilize a payment allocation method to allocate a payment across all of a customer's installment loans at once.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateInstallmentLoansMultipayment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateInstallmentLoansMultipayment"
          }
        }
      }
    },
    "/accounts/{account_id}/statements/list": {
      "get": {
        "tags": [
          "statements"
        ],
        "summary": "Get a list of all current and prior statements for a specific account",
        "description": "List of statements for the account. To view line items for a specific statement, use the `/accounts/{account_id}/statements` route",
        "operationId": "getAccountStatementsList",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated statements list requests sorted by reverse statement date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Statements for the account.",
                  "properties": {
                    "account_id": {
                      "type": "string",
                      "format": "uuid",
                      "description": "The Canopy-generated ID for the account",
                      "example": "111eff36-cbec-4119-b188-b76200e804d8"
                    },
                    "effective_as_of_date": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
                      "example": "2018-07-20T09:10:14Z"
                    },
                    "statements_list": {
                      "type": "array",
                      "description": "An array of statements included in the billing cycle.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "statement_id": {
                            "type": "string",
                            "format": "uuid",
                            "description": "A Canopy-generated ID for the statement",
                            "example": "3627809b-ff07-4e41-b127-44260efb3b80"
                          },
                          "available_credit_balance": {
                            "type": "number",
                            "description": "The total available credit balance (in cents) for the account.",
                            "example": "600000"
                          },
                          "total_balance": {
                            "type": "number",
                            "description": "The total balance (in cents) associated with the account.",
                            "example": "400000"
                          },
                          "min_pay_due_date": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The `Date-Time` at which the minimum payment is due."
                          },
                          "min_pay_amount_cents": {
                            "type": "number",
                            "description": "The minimum amount (in cents) due for this statement."
                          },
                          "billing_cycle_start_date": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The inclusive starting `Date-Time` that defines which transations are part of this statement."
                          },
                          "billing_cycle_end_date": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The inclusive ending `Date-Time` that defines which transations are part of this statement."
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
		"/accounts/{account_id}/statements/{statement_id}": {
      "get": {
        "tags": [
          "statements"
        ],
        "summary": "Get a specific statement for a specific account.",
        "description": "This will return a statement that corresponds with the passed Statement ID. Relevant IDs for an account's historical statements can be obtained from the `accounts/{account_id}/statements/list` route.",
        "operationId": "getAccountStatement",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "statement_id",
            "in": "path",
            "description": "The ID of a specific statement you would like returned.",
            "required": true,
            "style": "simple",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
				],
				"responses": {
          "200": {
            "$ref": "#/components/responses/AccountStatement"
          },
          "404": {
            "description": "Statement not found"
          }
        }
      }
		}
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "Account": {
        "$ref": "./schemas/_installments_release_Account.json"
      },
			"ComplexAccount": {
        "$ref": "./schemas/_installments_release_ComplexAccount.json"
      },
			"AccountStatement": {
        "$ref": "./schemas/AccountStatement.json"
      },
      "Product": {
        "$ref": "./schemas/_installments_release_Product.json"
      },
      "Product_Summary": {
        "$ref": "./schemas/ProductSummary.json"
      },
      "Customer": {
        "$ref": "./schemas/Customer.json"
      },
			"ComplexCustomer": {
        "$ref": "./schemas/ComplexCustomer.json"
      },
      "APIUser": {
        "$ref": "./schemas/ApiUser.json"
      },
			"Notification": {
        "$ref": "./schemas/Notification.json"
			},
      "Ticket": {
        "type": "object",
        "properties": {
          "ticket_id": {
            "type": "string",
            "format": "uuid",
            "description": "A Canopy-generated unique ID for the ticket",
            "example": "bb6db06e-32ea-4e6a-8e6f-6e704b606a7e"
          },
          "account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the ticket to which the Ticket is assigned",
            "example": "5fb3a288-5f6c-440f-b079-b06c828b7768"
          },
          "owner": {
            "description": "The API User currently assigned to the Ticket",
            "$ref": "#/components/schemas/APIUser"
          },
          "notes": {
            "type": "array",
            "description": "An array of Notes written on the Ticket",
            "items": {
              "$ref": "#/components/schemas/Note"
            }
          },
          "workflow": {
            "type": "string",
						"enum": ["disputes", "debit adjustments", "credit adjustments", "fraud", "general"],
            "description": "The review workflow to which this ticket belongs",
            "example": "disputes"
          },
          "status": {
            "type": "string",
            "enum": [
              "not-reviewed",
              "under-review",
              "review-complete"
            ],
            "description": "The current status of the Ticket"
          }
        }
      },
      "Note": {
        "$ref": "./schemas/Note.json"
      },
      "Comment": {
        "type": "object",
        "properties": {
          "comment_id": {
            "type": "string",
            "format": "uuid",
            "description": "A Canopy-generated unique ID for the comment",
            "example": "7b2e189d-d6bb-41c2-95c1-1174b58246fa"
          },
          "ticket_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the ticket to which the Comment is assigned",
            "example": "bb6db06e-32ea-4e6a-8e6f-6e704b606a7e"
          },
					"account_id": {
            "type": "string",
            "format": "uuid",
            "description": "The ID of the account to which the Note is assigned",
            "example": "bb6db06e-32ea-4e6a-8e6f-6e704b606a7e"
          },
          "author": {
            "description": "The API User who authored the comment",
            "$ref": "#/components/schemas/APIUser"
          },
          "message": {
            "type": "string",
            "description": "The contents of the comment.",
            "example": "This ticket is blocked while Ken is out on vacation."
          }
        }
      },
      "Base_Policy_Config": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"min_pay": {
						"$ref": "#/components/schemas/Base_Policy_Config_Min_Pay"
					},
					"billing_cycle": {
						"$ref": "#/components/schemas/Base_Policy_Config_Billing_Cycle"
					},
					"interest_policies": {
						"$ref": "./schemas/InterestPolicy.json"
					},
					"close_of_business_and_timezone": {
						"type": "string",
						"description":"Time and timezone of the close of business. This is used for statement cuts and partner-level and issuing bank-level reconciliation",
						"format": "date-time",
						"example": "2020-03-20T09:12:28Z"
          }
				},
				"description": "A base group of policies that define a Product"
      },
      "Base_Policy_Config_Min_Pay": {
        "type": "object",
        "properties": {
          "percentage": {
            "type": "number",
            "description": "The percentage of total balance calculated for min pay. (i.e. 20 means 20%)",
            "example": "20"
          }
        },
        "description": "The configured minimum payment required for a given pay period."
      },
      "Base_Policy_Config_Billing_Cycle": {
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "The length of the billing cycle. after which a statement is generated, and a due date assigned. IE '1 month' '3 months' or '7 days' (most common is monthly)",
            "format": "interval",
            "example": "1 month"
          },
          "billing_due_date_interval": {
            "type": "string",
            "description": "The amount of time you would like between the statement cut and the billing due date. IE '25 days'.  Cannot exceed the start of the next billing cycle and generally needs to be at least 21 days.",
            "format": "interval",
            "example": "25 days"
          }
        },
        "description": "The Billing Cycle Object"
      },
      "Interest_Policy": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "compound"
            ],
            "example": "compound"
          },
          "method": {
            "type": "string",
            "description": "The actual base formula used to calculate and assign interest.",
            "enum": [
              "average daily balance"
            ],
            "example": "average daily balance"
          },
          "day_calc_type": {
            "type": "string",
            "description": "Affects the base calculation by determining how many days there are in a given year.",
            "enum": [
              "365"
            ],
            "example": "365"
          },
          "interest_calc_time": {
            "type": "string",
            "description": "Interest for this policy is calculated at this time every X interval.",
            "format": "date-time",
            "example": "05:00:00"
          }
        },
        "description": "The Interest Policy Object"
      },
      "LineItem": {
        "$ref": "./schemas/LineItem.json"
      }
    },
    "requestBodies": {
      "LogInApiUser": {
        "$ref": "./requestBodies/LogInApiUser.json"
      },
      "UpdateApiUserPassword": {
        "$ref": "./requestBodies/UpdateApiUserPassword.json"
      },
      "RegisterApiUser": {
        "$ref": "./requestBodies/RegisterApiUser.json"
      },
      "CreateProduct": {
        "$ref": "./requestBodies/_Installments_Release_CreateProduct.json"
      },
      "CreateCustomer": {
        "$ref": "./requestBodies/CreateCustomer.json"
      },
			"UpdateNotification": {
        "$ref": "./requestBodies/UpdateNotification.json"
			},
			"UpdateCustomer": {
        "$ref": "./requestBodies/UpdateCustomer.json"
      },
      "CreateAccount": {
        "$ref": "./requestBodies/_installments_release_CreateAccount.json"
      },
      "CreateInstallmentLoan": {
        "$ref": "./requestBodies/CreateInstallmentLoan.json"
      },
			"CreateApiUserInvitation": {
				"description": "Body of request to invite new API user. Checks permissions of invite-creator.",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["email", "role"],
							"properties": {
								"roles": {
									"type": "array",
									"description": "An array of roles to be made accessible for the user. [Contact our team](mailto:anurag@canopyservicing.com?subject=API%20Access%20Request) for a full list of options.",
									"items": {
										"type": "integer",
										"example": 5
									},
									"example": [1, 2, 5]
								},
								"email": {
									"type": "string",
									"format": "email",
									"description": "The email address of this API User",
									"example": "marissa@globex.com"
                }
							}
						}
					}
				}
			},
      "CreateApiUser": {
        "$ref": "./requestBodies/CreateApiUser.json"
      },
			"UpdateApiUser": {
				"description": "Body of request to update API user. Checks permissions of caller.",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["email", "password"],
							"properties": {
								"name_prefix": {
									"type": "string",
									"description": "Prefix to the user's name",
									"example": "Dr."
								},
								"first_name": {
									"type": "string",
									"description": "User's first name",
									"example": "Miriam"
								},
								"middle_name": {
									"type": "string",
									"description": "User's middle name",
									"example": "Louise"
								},
								"last_name": {
									"type": "string",
									"description": "User's last name",
									"example": "Trevino"
								},
								"name_suffix": {
									"type": "string",
									"description": "Prefix to the user's name",
									"example": "Jr"
								},
								"email": {
									"type": "string",
									"format": "email",
									"description": "The email address of this API User",
									"example": "marissa@globex.com"
								},
								"password": {
									"type": "string",
									"description": "The password for this API User's account",
									"example": "secret_password123!!"
								}
							}
						}
					}
				}
      },
      "UpdateDispute": {
				"description": "Body of request to update dispute.",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["dispute_status"],
							"properties": {
                "dispute_status": {
                  "type": "string",
                  "enum": ["pending", "cx_won", "cx_won", "refunded"],
                  "example": "pending"
                },
                "network": {
                  "type": "string",
                  "description": "The network from which this request comes",
                  "example": "visa"
                }
							}
						}
					}
				}
			},
      "CreateCharge": {
        "description": "Body of request to create charge",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "amount_cents",
                "effective_at",
                "merchant_data"
              ],
              "properties": {
                "amount_cents": {
                  "type": "integer",
                  "description": "The Integer Amount of the Charge in Cents",
                  "example": "200"
                },
                "effective_at": {
                  "type": "string",
                  "description": "The `Date-Time` that the charge should be recorded to the account. Although the charge is being added to Canopy today, it can actually be effective as of 10 days ago.",
                  "format": "date-time",
                  "example": "2020-07-20T09:11:28Z"
                },
                "rate": {
                  "type": "number",
                  "description": "The percentage rate to be applied to this charge (i.e. 15.5 means 15.5%). If not included, defaults to the rate for the acount.",
                  "example": "15.5%"
                },
                "merchant_data": {
                  "type": "object",
                  "description": "",
                  "required": [
                    "mcc_code"
                  ],
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "mcc_code": {
                      "type": "number"
                    },
                    "phone_number": {
                      "type": "string",
                      "format": "phonenumber"
                    }
                  }
                },
                "reference_id": {
                  "type": "string",
                  "description": "A unique ID generated in your system to associate with the Charge.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "external_ids": {
                  "type": "array",
                  "description": "An array of static references to ID fields in a third party system.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the External Party",
                        "example": "Globex Card Processing"
                      },
                      "id": {
                        "type": "string",
                        "description": "External Account ID",
                        "example": "22445702-a389-431f-927d-07b8d0750787"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateChargeback": {
        "description": "Body of request to create chargeback",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "dispute_id"
              ],
              "properties": {
                "dispute_id": {
                  "type": "string",
                  "description": "The ID of the dispute with which this chargeback is associated.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "chargeback_reason": {
                  "type": "string",
                  "enum": [],
                  "description": ""
                }
              }
            }
          }
        }
      },
      "CreatePayment": {
        "description": "Body of request to create payment.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "amount_cents": {
                  "type": "integer",
                  "description": "The Integer Amount of the Payment in Cents",
                  "example": "200"
                },
                "effective_at": {
                  "type": "string",
                  "description": "The `Date-Time` that the payment should be recorded to the account. Although the payment is being added to Canopy today, it can actually be effective as of 10 days ago.",
                  "format": "date-time",
                  "example": "2020-07-20T09:11:28Z"
                },
                "reference_id": {
                  "type": "string",
                  "description": "A unique ID generated in your system to associate with the Payment.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "external_ids": {
                  "type": "array",
                  "description": "An array of static references to ID fields in a third party system.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the External Party",
                        "example": "Globex Card Processing"
                      },
                      "id": {
                        "type": "string",
                        "description": "External Account ID",
                        "example": "22445702-a389-431f-927d-07b8d0750787"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateInstallmentLoansMultipayment": {
        "$ref": "./requestBodies/CreateInstallmentLoansMultipayment.json"
      },
      "CreateRefund": {
        "description": "Body of request to create refund.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "amount_cents": {
                  "type": "integer",
                  "description": "The integer amount of the refund in cents. If not included, the amount will be the full value of the original charge being refunded.",
                  "example": "200"
                },
                "effective_at": {
                  "type": "string",
                  "description": "The `Date-Time` that the refund should be recorded to the account. Although the refund is being added to Canopy today, it can actually be effective as of 10 days ago.",
                  "format": "date-time",
                  "example": "2020-07-20T09:11:28Z"
                },
                "reference_id": {
                  "type": "string",
                  "description": "A unique ID generated in your system to associate with the refund.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "external_ids": {
                  "type": "array",
                  "description": "An array of static references to ID fields in a third party system.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the External Party",
                        "example": "Globex Card Processing"
                      },
                      "id": {
                        "type": "string",
                        "description": "External Refund ID",
                        "example": "22445702-a389-431f-927d-07b8d0750787"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateDispute": {
        "description": "Body of request to create dispute.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "chargeback_reason_code": {
                  "type": "string",
                  "description": "A code provided by the issuing bank involved in a chargeback, which is meant to identify the reason for the dispute. Each of the major card brands, including Visa, MasterCard, and others, have their own system of reason codes. Reason codes are important to help merchants address recurring chargeback triggers, as well as identify frivolous chargebacks, against which the merchant will need to fight back.",
                  "example": "13.3"
                }
              }
            }
          }
        }
      },
      "CreateCreditAdjustment": {
        "description": "Body of request to create credit adjustment.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "amount_cents": {
                  "type": "integer",
                  "description": "The Integer Amount of the credit adjustment in Cents",
                  "example": "200"
                },
                "effective_at": {
                  "type": "string",
                  "description": "The `Date-Time` that the credit adjustment should be recorded to the account. Although the payment is being added to Canopy today, it can actually be effective as of 10 days ago.",
                  "format": "date-time",
                  "example": "2020-07-20T09:11:28Z"
                },
                "reference_id": {
                  "type": "string",
                  "description": "A unique ID generated in your system to associate with the credit adjustment.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "external_ids": {
                  "type": "array",
                  "description": "An array of static references to ID fields in a third party system.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the External Party",
                        "example": "Globex Card Processing"
                      },
                      "id": {
                        "type": "string",
                        "description": "External Account ID",
                        "example": "22445702-a389-431f-927d-07b8d0750787"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreateDebitAdjustment": {
        "description": "Body of request to create debit adjustment.",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "amount_cents": {
                  "type": "integer",
                  "description": "The Integer Amount of the debit adjustment in Cents",
                  "example": "200"
                },
                "effective_at": {
                  "type": "string",
                  "description": "The `Date-Time` that the debit adjustment should be recorded to the account. Although the payment is being added to Canopy today, it can actually be effective as of 10 days ago.",
                  "format": "date-time",
                  "example": "2020-07-20T09:11:28Z"
                },
                "reference_id": {
                  "type": "string",
                  "description": "A unique ID generated in your system to associate with the debit adjustment.",
                  "example": "e39c6b0d-5793-49c5-bee7-a2dbf8808f3a"
                },
                "external_ids": {
                  "type": "array",
                  "description": "An array of static references to ID fields in a third party system.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the External Party",
                        "example": "Globex Card Processing"
                      },
                      "id": {
                        "type": "string",
                        "description": "External Account ID",
                        "example": "22445702-a389-431f-927d-07b8d0750787"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "responses": {
      "LogInApiUser": {
        "$ref": "./responses/LogInApiUser.json"
      },
      "UpdateApiUserPassword": {
        "$ref": "./responses/UpdateApiUserPassword.json"
      },
      "RegisterApiUser": {
        "$ref": "./responses/RegisterApiUser.json"
      },
      "CustomerAccount": {
        "$ref": "./responses/_installments_release_CustomerAccounts.json"
      },
      "CreateCustomer": {
        "$ref": "./responses/CreateCustomer.json"
      },
      "Customers": {
        "$ref": "./responses/Customers.json"
      },
      "UpdateCustomer": {
        "$ref": "./responses/UpdateCustomer.json"
      },
      "Notifications": {
        "$ref": "./responses/Notifications.json"
      },
      "CreateProduct": {
        "$ref": "./responses/_installments_release_CreateProduct.json"
      },
      "ApiUser": {
        "$ref": "./responses/ApiUser.json"
      },
      "ApiUsers": {
        "$ref": "./responses/ApiUsers.json"
      },
      "CreateInstallmentLoan": {
        "$ref": "./responses/CreateInstallmentLoan.json"
      },
      "InstallmentLoan": {
        "$ref": "./responses/InstallmentLoan.json"
      },
      "InstallmentLoans": {
        "$ref": "./responses/InstallmentLoans.json"
      },
      "CreateAccount": {
        "description": "New Account Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ComplexAccount"
            }
          }
        }
			},
			"CreateNote": {
        "description": "New Note Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Note"
            }
          }
        }
			},
			"CreateTicket": {
        "description": "New Ticket Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        }
      },
      "UpdateAccount": {
        "description": "Account Updated",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
			},
			"UpdateNotification": {
        "$ref": "./responses/UpdateNotification.json"
      },
      "CreateApiUser": {
        "$ref": "./responses/CreateApiUser.json"
      },
			"CreateApiUserInvitation": {
				"description": "Successfully invited a new user",
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"properties": {
								"email": {
									"type": "string",
									"format": "email",
									"description": "The email address of this API User",
									"example": "marissa@globex.com"
								},
								"created_at": {
									"type": "string",
									"description": "The `Date-Time` which the invitation was created in the API",
									"format": "date-time",
									"example": "2018-06-20T09:12:30Z"
								},
								"expires_at": {
									"type": "string",
									"description": "The `Date-Time` which the invitation expires",
									"format": "date-time",
									"example": "2018-06-21T09:12:30Z"
								}
							}
						}
					}
				}
			},
      "CreateCharge": {
        "description": "Charge Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "e58b78c3-0df8-4895-b10c-0fa88b266119"
                }
              }
            }
          }
        }
      },
      "CreateChargeback": {
        "description": "Chargeback Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "e58b78c3-0df8-4895-b10c-0fa88b266119"
                }
              }
            }
          }
        }
      },
      "CreateRefund": {
        "description": "Refund Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "e58b78c3-0df8-4895-b10c-0fa88b266119"
                }
              }
            }
          }
        }
      },
      "CreatePayment": {
        "description": "Charge Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "464920a3-d531-422d-adfb-ce61e52255bf"
                }
              }
            }
          }
        }
      },
      "CreateInstallmentLoansMultipayment": {
        "$ref": "./responses/CreateInstallmentLoansMultipayment.json"
      },
      "CreateCreditAdjustment": {
        "description": "Credit Adjustment Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "464920a3-d531-422d-adfb-ce61e52255bf"
                }
              }
            }
          }
        }
      },
      "CreateDebitAdjustment": {
        "description": "Debit Adjustment Created",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "line_item_id": {
                  "type": "string",
                  "format": "uuid",
                  "description": "The ID in Canopy's system for this line item.",
                  "example": "464920a3-d531-422d-adfb-ce61e52255bf"
                }
              }
            }
          }
        }
      },
      "Account": {
        "$ref": "./responses/_installments_release_Account.json"
      },
      "Accounts": {
        "$ref": "./responses/_installments_release_Accounts.json"
      },
			"Ticket": {
        "description": "Successful query of information for a specific ticket",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Ticket"
            }
          }
        }
      },
      "Comment": {
        "description": "Successful query of information for a specific ticket",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Comment"
            }
          }
        }
			},
			"AccountHistory": {
        "description": "Successful query of history for a specific account",
        "content": {
          "application/json": {
            "schema": {
							"type": "object",
							"properties": {
								"activity": {
									"type": "array",
									"description": "A history of all notes and tickets on an account.",
									"items": {
										"oneOf": [
											{
												"$ref": "#/components/schemas/Note"
											},
											{
												"$ref": "#/components/schemas/Ticket"
											}
										]
									}
								},
								"created_date": {
									"type": "string",
									"format": "date-time",
									"description": "The date and time the account was created."
								}
							}
            }
          }
        }
      },
      "AccountTicketHistory": {
        "description": "Successful query of history of tickets for a specific account",
        "content": {
          "application/json": {
            "schema": {
							"type": "object",
							"properties": {
								"activity": {
									"type": "array",
									"description": "A history of all tickets on an account.",
									"items": {
                    "$ref": "#/components/schemas/Ticket"
									}
								},
								"created_date": {
									"type": "string",
									"format": "date-time",
									"description": "The date and time the account was created."
								}
							}
            }
          }
        }
      },
      "TicketCommentHistory": {
        "description": "Successful query of history of comments for a specific ticket on an account",
        "content": {
          "application/json": {
            "schema": {
							"type": "object",
							"properties": {
								"activity": {
									"type": "array",
									"description": "A history of all comments on a ticket.",
									"items": {
                    "$ref": "#/components/schemas/Note"
									}
								},
								"created_date": {
									"type": "string",
									"format": "date-time",
									"description": "The date and time the account was created."
								}
							}
            }
          }
        }
			},
      "AccountNoteHistory": {
        "description": "Successful query of history of notes for a specific account",
        "content": {
          "application/json": {
            "schema": {
							"type": "object",
							"properties": {
								"activity": {
									"type": "array",
									"description": "A history of all notes on an account.",
									"items": {
                    "$ref": "#/components/schemas/Note"
									}
								},
								"created_date": {
									"type": "string",
									"format": "date-time",
									"description": "The date and time the account was created."
								}
							}
            }
          }
        }
			},
			"Customer": {
        "description": "Successful query of information for a specific customer",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "AccountStatement": {
        "$ref": "./responses/_installments_release_AccountStatement.json"
      },
      "Products": {
        "$ref": "./responses/_installments_release_Products.json"
      },
      "ProductAccounts": {
        "$ref": "./responses/ProductAccounts.json"
      },
      "ProductSummary": {
        "$ref": "./responses/ProductSummary.json"
      },
      "AmortizationSchedule": {
        "$ref": "./responses/AmortizationSchedule.json"
      },
      "LineItem": {
        "$ref": "./responses/LineItem.json"
      },
      "LineItems": {
        "$ref": "./responses/LineItems.json"
      }
    }
  }
}
