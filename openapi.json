{
  "openapi": "3.0.3",
  "info": {
    "title": "Canopy Servicing Core API",
    "description": "**API Overview** \n Canopy allows you to easily manage credit, installment, or other more complex lending programs from a servicing and compliance perspective - whether newly launched or migrated from existing systems. Using Canopy, you can track balances and transactions for each customer of your product, both in real-time and historically. You can see how various policy and product changes would impact your customers, and readily generate compliance reports and minimize your risk with all real-time information always on hand. \n \n Canopy additionally surfaces information around all of your lending activity through its intuitive UI which provides a customer support interface as well as at-a-glance data needed for compliance and insights. \n \n Simply configure your productâ€™s policies through our Create Product API endpoint, and then you can immediately begin adding customer accounts and relying on Canopy for accurate servicing information.",
    "termsOfService": "https://canopyservicing.com/terms/",
    "contact": {
      "email": "support@canopyservicing.com"
    },
    "version": "1.1.1"
  },
  "x-topics": [
    {
      "title": "Getting Started",
      "content": "*Get started in three easy steps.* \n \n 1) Review the [Authentication](https://learn.canopyservicing.com/dev-setup) tutorial to connect and experiment with our Sandbox environment. \n \n 2) Create your own credentials in our [public sandbox](https://play.canopyservicing.com/register). \n \n 3) Follow the onboarding steps once you've logged into the public sandbox. \n \n Once your product is configured and launched in Canopy, you have access to the full power of the Servicing API! You can take advantage of sample workflows provided by our team, or construct your own using this API documentation."
    },
    {
      "title": "Authentication",
      "content": "To create your organization within Canopy, register for our [public sandbox](https://play.canopyservicing.com/register). You can find a full guide to authenticating in Canopy in our [developer onboarding tutorial](https://learn.canopyservicing.com/dev-setup)."
    },
    {
      "title": "Troubleshooting",
      "content": "See a [detailed overview of error codes supported by Canopy and their meanings.](https://www.notion.so/canopy1/External-API-Status-Codes-576e6b9e43154db286d39a9aba1391aa)"
    },
    {
      "title": "Test it out",
      "content": "To get going quickly, we recommend using an API collaboration tool called Postman. You can use the buttons below to import our collection, which points to the environment you want to build against and already has our API endpoints configured. Be sure to define the required environment variables. \n \n If you'd just like to get set up with Canopy and send some requests with pre-populated sample data, we recommend using our Quickstart collection. \n \n When you'd like to start applying some business logic and try formulating what your actual implementation looks like, we recommend starting with our public sandbox. \n \n Once you've explored our public sandbox and formulated your business model, you can test in our protected UAT environment. \n \n**Quickstart:** [![Quickstart](https://run.pstmn.io/button.svg)](https:/carpp.getpostman.com/run-collection/5c939be57d1af0629496#?env%5BPLAY%5D=W3sia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiY2xpZW50X3NlY3JldCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6InNjaGVtZSIsInZhbHVlIjoiaHR0cHMiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiaG9zdG5hbWUiLCJ2YWx1ZSI6InNhbmRib3gtYXBpLmNhbm9weXNlcnZpY2luZy5jb20iLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoicHJvZHVjdF9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6ImFjY291bnRfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJsaW5lX2l0ZW1faWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJjdXN0b21lcl9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6ImF1dGhUb2tlbiIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6ImN1cnJlbnRfdGltZXN0YW1wIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiUGhvbmVfbnVtYmVyIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiU1NOIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiZXZlbnRfaWQiLCJ2YWx1ZSI6bnVsbCwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifV0=) \n\n**Public Sandbox:** [![Public Sandbox](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d0b9c971e4ab3bb1324f#?env%5BProtected%3A%20Public%20Sandbox%5D=W3sia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5Ijoic2NoZW1lIiwidmFsdWUiOiJodHRwcyIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiaG9zdG5hbWUiLCJ2YWx1ZSI6InNhbmRib3gtYXBpLmNhbm9weXNlcnZpY2luZy5jb20iLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6InByb2R1Y3RfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiYWNjb3VudF9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJsaW5lX2l0ZW1faWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiYXBpX3VzZXJfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiY3VzdG9tZXJfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiYXV0aFRva2VuIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImV4dGVybmFsX3Byb2R1Y3RfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiZXZlbnRfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9XQ==) \n \n**Protected UAT:** [![Protected UAT](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d0b9c971e4ab3bb1324f#?env%5BProtected%3A%20Public%20UAT%5D=W3sia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiY2xpZW50X3NlY3JldCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6InNjaGVtZSIsInZhbHVlIjoiaHR0cHMiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiaG9zdG5hbWUiLCJ2YWx1ZSI6InVhdC1hcGkuY2Fub3B5c2VydmljaW5nLmNvbSIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJwcm9kdWN0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiYWNjb3VudF9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6ImxpbmVfaXRlbV9pZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQifSx7ImtleSI6ImFwaV91c2VyX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiY3VzdG9tZXJfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJhdXRoVG9rZW4iLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In0seyJrZXkiOiJleHRlcm5hbF9wcm9kdWN0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCJ9LHsia2V5IjoiZXZlbnRfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0In1d) \n \n**Production:** [![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d0b9c971e4ab3bb1324f#?env%5BProtected%3A%20Production%5D=W3sia2V5IjoiY2xpZW50X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImNsaWVudF9zZWNyZXQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5Ijoic2NoZW1lIiwidmFsdWUiOiJodHRwcyIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoiaG9zdG5hbWUiLCJ2YWx1ZSI6ImFwaS5jYW5vcHlzZXJ2aWNpbmcuY29tIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJwcm9kdWN0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImFjY291bnRfaWQiLCJ2YWx1ZSI6IiIsImVuYWJsZWQiOnRydWV9LHsia2V5IjoibGluZV9pdGVtX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImFwaV91c2VyX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImN1c3RvbWVyX2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImF1dGhUb2tlbiIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZX0seyJrZXkiOiJleHRlcm5hbF9wcm9kdWN0X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfSx7ImtleSI6ImV2ZW50X2lkIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlfV0=)"
    },
    {
      "title": "Pagination",
      "content": "Canopy uses a two-factor basis to drive the order of responses in `GET` requests with an array of results. They are first ordered by `effective_at` by when the entity is effective in the system, and second by an internal index to make sure the order is always universal. From the caller's perspective, you can let Canopy know where to start its pagination response by providing a `starting_after` or `ending_before` string value. If neither a `starting_after` nor `ending_before` value is provided, we'll assume you're requesting the very first page of responses. In subsequent requests, you can simply grab these values from the `paging` key in the response body from your previous request. If you're aiming to provide your users with a link to the previous page, use the `ending_before` query parameter in your next request. If going to the next page, use the `starting_after` value instead."
    }
  ],
  "servers": [
    {
      "url": "https://sandbox-api.canopyservicing.com",
      "description": "Public Sandbox"
    },
    {
      "url": "https://uat-api.canopyservicing.com",
      "description": "Protected UAT Sandbox"
    },
    {
      "url": "https://api.canopyservicing.com",
      "description": "Production"
    }
  ],
  "security": [
    {
      "oAuth2": []
    }
  ],
  "tags": [
    {
      "name": "api_users",
      "description": "Authenticate to use the appropriate environment (sandbox or production) within Canopy"
    },
    {
      "name": "products",
      "description": "Create and launch credit products within the Canopy system."
    },
    {
      "name": "customers",
      "description": "Onboard customers into your system, so they can begin using your credit products"
    },
    {
      "name": "accounts",
      "description": "Manage the way your users use credit products you've launched in Canopy"
    },
    {
      "name": "line_items",
      "description": "Manage individual line items for your customers in Canopy."
    },
    {
      "name": "notes",
      "description": "Help your customer service team track its activity across accounts."
    },
    {
      "name": "statements",
      "description": "Generate per billing cycle statements for your accounts in Canopy."
    },
    {
      "name": "amortization_schedule",
      "description": "Get Amortization information for installment loans."
    },
    {
      "name": "event_subscriptions",
      "description": "Subscribe to events via webhooks from Canopy."
    },
    {
      "name": "integrations",
      "description": "Configure third-party integrations with Canopy."
    }
  ],
  "paths": {
    "/api_users": {
      "post": {
        "tags": ["api_users"],
        "summary": "Invite a new API user to Canopy",
        "operationId": "createApiUser",
        "description": "When you create a new API user via this `POST` request, an email invite will be sent for the new user to join your organization. The email invite includes a link with a unique token that will allow the new user to register to join your team in Canopy.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateApiUser"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      },
      "get": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["api_users"],
        "summary": "Get all API users in your organization",
        "description": "Returns a list of all API users in your organization.",
        "operationId": "getApiUsers",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApiUsers"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "No Api Users found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/api_users/login": {
      "post": {
        "tags": ["api_users"],
        "summary": "Log in as an API user",
        "operationId": "logInApiUser",
        "description": "When provided appropriate credentials, this route signs in an API user.",
        "requestBody": {
          "$ref": "#/components/requestBodies/LogInApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/LogInApiUser"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/api_users/password": {
      "put": {
        "tags": ["api_users"],
        "summary": "Update the password for an API User",
        "operationId": "updateApiUserPassword",
        "description": "When provided appropriate credentials, this route changes an API User's password.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateApiUserPassword"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateApiUserPassword"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/api_users/register": {
      "put": {
        "tags": ["api_users"],
        "summary": "Complete registration for an invited API user",
        "operationId": "registerApiUserPassword",
        "description": "When provided appropriate credentials, this route updates an API user's information for registration.",
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterApiUser"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/RegisterApiUser"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Not found."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/api_users/summary": {
      "get": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["api_users"],
        "summary": "Get summary info for an API user",
        "description": "Get all summarized information pertaining to the API user making the request.",
        "operationId": "getApiUser",
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ApiUser"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "No API user found."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/products": {
      "post": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["products"],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "description": "At its core, Canopy allows you to create credit products that meet the specific needs of your users. We offer robust options to configure these products within our system. \n \n For most use cases, we recommend configuring products by sending an excel file detailing your preferred configurations to the [Canopy team](mailto:support@canopyservicing.com?subject=API%20Access%20Request); however, you can also configure and manage products programmatically using this API documentation. \n \n Request body for creating a new product.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateProduct"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      },
      "get": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["products"],
        "summary": "Get all available products",
        "description": "If you have configured and launched multiple products within Canopy, retrieve information related to all of your configured products at once.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of products to be returned. Defaults to 10.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "example": 10
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Products"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Unable to get products"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/products/{product_id}/migration_mode": {
      "put": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["data_migrations"],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "description": "At its core, Canopy allows you to create credit products that meet the specific needs of your users. We offer robust options to configure these products within our system. \n \n For most use cases, we recommend configuring products by sending an excel file detailing your preferred configurations to the [Canopy team](mailto:support@canopyservicing.com?subject=API%20Access%20Request); however, you can also configure and manage products programmatically using this API documentation. \n \n Request body for creating a new product.",
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateProductMigrationMode"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/UpdateProductMigrationMode"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/customers/accounts": {
      "get": {
        "tags": ["customers"],
        "summary": "Get all accounts for all customers",
        "description": "Returns all accounts from the perspective of each customer. For instance, if one account has two customers, these are reflected as two separate items in the response array. Similarly, if one customer has multiple accounts, each account is reflected as a separate item in the response array.",
        "operationId": "getCustomersAccounts",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of customer accounts to be returned. Defaults to 30.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 100,
              "example": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "search_parameters",
            "in": "query",
            "description": "Currently, this API only supports searching by `name_first` or `name_last`. Based on the input search parameter, the top responses from our API search, up to or less than the provided `limit` will be returned.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "Alexander Supertramp"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomerAccounts"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Unable to get customers"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/customers": {
      "post": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["customers"],
        "summary": "Create a new customer",
        "operationId": "CreateCustomer",
        "description": "Customer can be created within Canopy with attached data managed in a secure and compliant way to facilitate providing the best service for products created through Canopy.",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCustomer"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateCustomer"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "security": [
          {
            "oAuth2": []
          }
        ],
        "tags": ["accounts"],
        "summary": "Create a new account",
        "description": "At least one account should be created for customer of each of your products. Once created, you will be able to add `line_items` to the account.",
        "operationId": "createAccount",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateAccount"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateAccount"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": ["accounts"],
        "summary": "Get a specific Account",
        "description": "",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Account not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/notes": {
      "post": {
        "tags": ["notes"],
        "summary": "Create a note for a specific account.",
        "description": "A note to be added to the account.",
        "operationId": "createAccountNote",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateNote"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateNote"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      },
      "get": {
        "tags": ["notes"],
        "summary": "Get All Notes for a specific Account",
        "description": "",
        "operationId": "getNotes",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Notes"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Note not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/line_items": {
      "get": {
        "tags": ["line_items"],
        "summary": "Get line items for a specific account.",
        "description": "Line Items for an Account include `charges` to the account and `payments` by the account holder. Results are paginated and sorted by line item effective date.",
        "operationId": "getAccountLineItems",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 50
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LineItems"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Line Items not found."
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/{line_item_id}": {
      "get": {
        "tags": ["line_items"],
        "summary": "Get information on a specific line item for a specific account",
        "description": "",
        "operationId": "getAccountLineItem",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 50
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "Pass the value from the `paging` response body in your previous request. If not provided, the zero-indexed starting point will be used. Either starting_after or ending_before may be provided, but not both.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LineItemWithChildren"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Line Items not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      },
      "put": {
        "tags": ["line_items"],
        "summary": "Change the status of an existing line item",
        "description": "",
        "operationId": "editLineItemStatus",
        "requestBody": {
          "$ref": "#/components/requestBodies/EditLineItem"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/EditLineItem"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/charges": {
      "post": {
        "tags": ["line_items"],
        "summary": "Create a charge for a specific account",
        "description": "",
        "operationId": "createAccountCharge",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCharge"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateCharge"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/payments": {
      "post": {
        "tags": ["line_items"],
        "summary": "Create a payment for a specific account",
        "description": "",
        "operationId": "createAccountPayment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePayment"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreatePayment"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/payment_reversals/{line_item_id}": {
      "post": {
        "tags": ["line_items"],
        "summary": "Reverses a payment for an account",
        "description": "",
        "operationId": "createAccountPayment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID of the original payment to be reversed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePaymentReversal"
        },
        "responses": {
          "200": {
            "description": "Payment reversal successfully applied."
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/statements/list": {
      "get": {
        "tags": ["statements"],
        "summary": "Get a list of all current and prior statements for a specific account",
        "description": "List of statements for the account. To view line items for a specific statement, use the `/accounts/{account_id}/statements` route",
        "operationId": "getAccountStatementsList",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated statements list requests sorted by reverse statement date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 50
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "example": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 100,
                  "items": {
                    "$ref": "#/components/schemas/AccountStatementSummary"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Statements not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/statements/{statement_id}": {
      "get": {
        "tags": ["statements"],
        "summary": "Get a specific statement for a specific account.",
        "description": "This will return a statement that corresponds with the passed Statement ID. Relevant IDs for an account's historical statements can be obtained from the `accounts/{account_id}/statements/list` route.",
        "operationId": "getAccountStatement",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "statement_id",
            "in": "path",
            "description": "The ID of a specific statement you would like returned.",
            "required": true,
            "style": "simple",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountStatement"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Statement not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/customers/{customer_id}/cards": {
      "post": {
        "tags": ["customers"],
        "summary": "Create a new card for an existing customer on an account",
        "description": "",
        "operationId": "createCustomerAccountCard",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "customer_id",
            "in": "path",
            "description": "Customer ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomerAccountCard"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/accounts/{account_id}/amortization_schedule": {
      "get": {
        "tags": ["amortization_schedule"],
        "summary": "Get the amortization schedule for a specific loan",
        "description": "",
        "operationId": "getAmortizationSchedule",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "31mNprzLd2bKl6koVna68ARM"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated line item requests sorted by line item effective date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": 20
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": 50
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AmortizationSchedule"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "Amortization Schedule not found"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/organization": {
      "get": {
        "tags": ["organization"],
        "summary": "Get organization configuration",
        "description": "Get configured details for your organization",
        "operationId": "getOrganization",
        "responses": {
          "200": {
            "$ref": "#/components/responses/Organization"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/organization/subscribe": {
      "put": {
        "tags": ["event_subscriptions"],
        "summary": "Subscribe to event triggers from Canopy. ",
        "description": "As events occur in Canopy, your external system can be notified of them and handle them. For a breakdown of how Canopy will post to your webhook URL upon completion of events, review our [Webhook Events definition](https://www.notion.so/canopy1/External-Webhook-Events-d9e8bee140674b46a8eca6f426be3a86).",
        "operationId": "subscribeToEvents",
        "requestBody": {
          "$ref": "#/components/requestBodies/SubscribeToEvents"
        },
        "callbacks": {
          "statement_generation": {
            "{$request.body#/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/AccountStatement"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the webhook."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook created."
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/organization/subscribe/test": {
      "get": {
        "tags": ["organization"],
        "summary": "Test your webhook URL.",
        "description": "Test your webhook URL. You will receive a sample `test` event.",
        "operationId": "subscribeToEventsTest",
        "callbacks": {
          "test_event": {
            "{organization/webhook_url}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "event": {
                            "type": "string",
                            "description": "The type of event in the webhook response",
                            "example": "test_event"
                          },
                          "data": {
                            "type": "string",
                            "description": "A Hello World test webhook",
                            "example": "Hello World"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the webhook."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Event Triggered."
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/organization/payment_processors": {
      "put": {
        "tags": ["integrations"],
        "summary": "Configure payment processor information for your organization",
        "description": "",
        "operationId": "configurePaymentProcessors",
        "requestBody": {
          "$ref": "#/components/requestBodies/ConfigurePaymentProcessors"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConfigurePaymentProcessors"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    },
    "/organization/issuer_processors": {
      "put": {
        "tags": ["integrations"],
        "summary": "Configure issuer processor information for your organization",
        "description": "",
        "operationId": "configureIssuerProcessors",
        "requestBody": {
          "$ref": "#/components/requestBodies/ConfigureIssuerProcessors"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ConfigureIssuerProcessors"
          },
          "default": {
            "description": "Unexpected Error."
          },
          "401": {
            "description": "Unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "422": {
            "description": "Invalid input"
          },
          "429": {
            "description": "Too many requests."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oAuth2": {
        "type": "oauth2",
        "description": "This API uses OAuth 2 with the Resource Owner Password grant flow for human access and the Client Credentials grant flow for programmatic access.",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://dev-fi8iwkk1.us.auth0.com/oauth/token",
            "scopes": {}
          },
          "password": {
            "tokenUrl": "https://dev-fi8iwkk1.us.auth0.com/oauth/token",
            "scopes": {}
          }
        }
      }
    },
    "schemas": {
      "ApiUser": {
        "$ref": "./schemas/ApiUser.json"
      },
      "Account": {
        "$ref": "./schemas/Account.json"
      },
      "AccountStatement": {
        "$ref": "./schemas/AccountStatement.json"
      },
      "AccountStatementSummary": {
        "$ref": "./schemas/AccountStatementSummary.json"
      },
      "AmortizationSchedule": {
        "$ref": "./schemas/AmortizationSchedule.json"
      },
      "ComplexAccount": {
        "$ref": "./schemas/ComplexAccount.json"
      },
      "Customer": {
        "$ref": "./schemas/Customer.json"
      },
      "ComplexCustomer": {
        "$ref": "./schemas/ComplexCustomer.json"
      },
      "CustomerAccount": {
        "$ref": "./schemas/CustomerAccount.json"
      },
      "Note": {
        "$ref": "./schemas/Note.json"
      },
      "Product": {
        "$ref": "./schemas/Product.json"
      },
      "ProductSummary": {
        "$ref": "./schemas/ProductSummary.json"
      },
      "ProductAccounts": {
        "$ref": "./schemas/ProductAccounts.json"
      },
      "BasePolicyConfig": {
        "$ref": "./schemas/BasePolicyConfig.json"
      },
      "BasePolicyConfigMinPay": {
        "$ref": "./schemas/BasePolicyConfigMinPay.json"
      },
      "BasePolicyConfigBillingCycle": {
        "$ref": "./schemas/BasePolicyConfigBillingCycle.json"
      },
      "InterestPolicy": {
        "$ref": "./schemas/InterestPolicy.json"
      },
      "LineItem": {
        "$ref": "./schemas/LineItem.json"
      },
      "SimpleLineItem": {
        "$ref": "./schemas/SimpleLineItem.json"
      },
      "OrgPaymentProcessorConfig": {
        "$ref": "./schemas/OrgPaymentProcessorConfig.json"
      },
      "OrgIssuerProcessorConfig": {
        "$ref": "./schemas/OrgIssuerProcessorConfig.json"
      }
    },
    "requestBodies": {
      "LogInApiUser": {
        "$ref": "./requestBodies/LogInApiUser.json"
      },
      "UpdateApiUserPassword": {
        "$ref": "./requestBodies/UpdateApiUserPassword.json"
      },
      "RegisterApiUser": {
        "$ref": "./requestBodies/RegisterApiUser.json"
      },
      "CreateProduct": {
        "$ref": "./requestBodies/CreateProduct.json"
      },
      "CreateCustomer": {
        "$ref": "./requestBodies/CreateCustomer.json"
      },
      "UpdateCustomer": {
        "$ref": "./requestBodies/UpdateCustomer.json"
      },
      "CreateAccount": {
        "$ref": "./requestBodies/CreateAccount.json"
      },
      "CreateNote": {
        "$ref": "./requestBodies/CreateNote.json"
      },
      "CreateApiUser": {
        "$ref": "./requestBodies/CreateApiUser.json"
      },
      "CreateCharge": {
        "$ref": "./requestBodies/CreateCharge.json"
      },
      "CreatePayment": {
        "$ref": "./requestBodies/CreatePayment.json"
      },
      "CreatePaymentReversal": {
        "$ref": "./requestBodies/CreatePaymentReversal.json"
      },
      "ConfigurePaymentProcessors": {
        "$ref": "./requestBodies/ConfigurePaymentProcessors.json"
      },
      "ConfigureIssuerProcessors": {
        "$ref": "./requestBodies/ConfigureIssuerProcessors.json"
      },
      "EditLineItem": {
        "$ref": "./requestBodies/EditLineItem.json"
      },
      "UpdateProductMigrationMode": {
        "$ref": "./requestBodies/UpdateProductMigrationMode.json"
      },
      "SubscribeToEvents": {
        "$ref": "./requestBodies/SubscribeToEvents.json"
      }
    },
    "responses": {
      "ApiUser": {
        "$ref": "./responses/ApiUserResp.json"
      },
      "ApiUsers": {
        "$ref": "./responses/ApiUsers.json"
      },
      "LogInApiUser": {
        "$ref": "./responses/LogInApiUser.json"
      },
      "UpdateApiUserPassword": {
        "$ref": "./responses/UpdateApiUserPassword.json"
      },
      "RegisterApiUser": {
        "$ref": "./responses/RegisterApiUser.json"
      },
      "CreateProduct": {
        "$ref": "./responses/Product.json"
      },
      "Product": {
        "$ref": "./responses/Product.json"
      },
      "Products": {
        "$ref": "./responses/Products.json"
      },
      "CustomerAccounts": {
        "$ref": "./responses/CustomerAccounts.json"
      },
      "CreateCustomer": {
        "$ref": "./responses/CreateCustomer.json"
      },
      "UpdateCustomer": {
        "$ref": "./responses/UpdateCustomer.json"
      },
      "Customer": {
        "$ref": "./responses/Customer.json"
      },
      "Customers": {
        "$ref": "./responses/Customers.json"
      },
      "CreateAccount": {
        "$ref": "./responses/CreateAccount.json"
      },
      "Accounts": {
        "$ref": "./responses/Accounts.json"
      },
      "AmortizationSchedule": {
        "$ref": "./responses/AmortizationSchedule.json"
      },
      "CreateNote": {
        "$ref": "./responses/CreateNote.json"
      },
      "Notes": {
        "$ref": "./responses/Notes.json"
      },
      "CreateCharge": {
        "$ref": "./responses/CreateCharge.json"
      },
      "CreatePayment": {
        "$ref": "./responses/CreatePayment.json"
      },
      "Account": {
        "$ref": "./responses/Account.json"
      },
      "AccountStatement": {
        "$ref": "./responses/AccountStatement.json"
      },
      "ProductAccounts": {
        "$ref": "./responses/ProductAccounts.json"
      },
      "ProductSummary": {
        "$ref": "./responses/ProductSummary.json"
      },
      "LineItem": {
        "$ref": "./responses/LineItem.json"
      },
      "LineItemWithChildren": {
        "$ref": "./responses/LineItemWithChildren.json"
      },
      "LineItems": {
        "$ref": "./responses/LineItems.json"
      },
      "StatementsList": {
        "$ref": "./responses/StatementsList.json"
      },
      "CreateApiUser": {
        "$ref": "./responses/CreateApiUser.json"
      },
      "ConfigurePaymentProcessors": {
        "$ref": "./responses/ConfigurePaymentProcessors.json"
      },
      "ConfigureIssuerProcessors": {
        "$ref": "./responses/ConfigureIssuerProcessors.json"
      },
      "Organization": {
        "$ref": "./responses/Organization.json"
      },
      "EditLineItem": {
        "$ref": "./responses/EditLineItem.json"
      },
      "UpdateProductMigrationMode": {
        "$ref": "./responses/UpdateProductMigrationMode.json"
      },
      "CustomerAccountCard": {
        "$ref": "./responses/CustomerAccountCard.json"
      }
    }
  }
}
