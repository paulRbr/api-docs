{
  "openapi": "3.0.0",
  "info": {
    "title": "Canopy Servicing Core API",
    "description": "**API Overview** \n Canopy allows you to easily manage credit products from a servicing and compliance perspective - whether newly launched or migrated from existing systems. Using Canopy, you can track balances and transactions for each customer of your product, both in real-time and historically. You can access and track information related to disputes, see how various policy and product changes would impact your customers, and readily generate compliance reports and minimize your risk with all real-time information always on hand. \n \n Simply configure your productâ€™s policies through our [Policy Management Dashboard](https://admin.canopyservicing.com), and then you can immediately begin adding customer accounts and relying on Canopy for accurate servicing information.",
    "termsOfService": "https://api.canopyservicing.com/terms/",
    "contact": {
      "email": "will@canopyservicing.com"
    },
    "version": "1.3"
	},
	"x-topics": [
		{
			"title": "Getting Started",
			"content": "*Get started in four easy steps.* \n \n 1) Review the [Authentication](https://docs.canopyservicing.com/#topic-authentication) section to connect and experiment with our Sandbox environment. \n \n 2) [Contact us](mailto:anurag@canopyservicing.com?subject=API%20Access%20Request) to request Production API Keys and learn more about our business. \n \n 3) Configure policies \n &nbsp; &nbsp; &nbsp; a) For most uses, we recommend using the [Policy Management Dashboard](https://admin.canopyservicing.com) \n &nbsp; &nbsp; &nbsp; b) If you will be configuring many credit products programmatically or require niche configurations, you can also configure products in Canopy directly through our Policy Management API. \n \n 4) Once your product is configured and launched in Canopy, you have access to the full power of the Servicing API! You can take advantage of sample workflows provided by our team, or construct your own using this API documentation."
		},
		{
			"title": "Authentication",
			"content": "**Sandbox** \n \n To Authenticate to our Sandbox environment, no prior contact with our team is required (though we'd certainly love to connect!). Simply make an unauthenticated `POST` request to `https://sandbox.canopyservicing.com/users`. The response body returns a unique `api_user_id`. \n \n For any subsequent calls to our API, include a header `x-api-key` whose value is this unique `api_user_id` as part of your request. This lets us know that you are submitting a valid Sandbox request and grants you access to our entire Sandbox API. \n \n **Production** \n \n To request production credentials, [contact our team](mailto:anurag@canopyservicing.com)."
		}
	],
  "servers": [
    {
      "url": "https://sandbox.canopyservicing.com",
      "description": "Sandbox"
    }
  ],
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "products",
      "description": "Create and launch credit products within the Canopy system."
    },
    {
      "name": "authentication",
      "description": "Authenticate to use the appropriate environment (sandbox or production) within Canopy"
    },
    {
      "name": "users",
      "description": "Onboard users into your system, so they can begin using your credit products"
    },
    {
      "name": "accounts",
      "description": "Manage the way your users use credit products you've launched in Canopy"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Authenticate to the Canopy Sandbox",
        "operationId": "createSandboxUser",
        "description": "When you create a new user via this `POST` request, Canopy will respond with a unique ID for that user. \n Include this response as a header for all subsequent requests to the Canopy API under the header: `x-api-userid`.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreateUser"
          }
        }
      }
    },
    "/products": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "products"
        ],
        "summary": "Create a new product",
        "operationId": "createProduct",
        "description": "At its core, Canopy allows you to create credit products that meet the specific needs of your users. We offer robust options to configure these products within our system. \n \n For most use cases, we recommend configuring products by using the [Policy Management Dashboard](https://canopyservicing.com); however, you can also configure and manage products programmatically. \n \n Request body for creating a new product. \n \n The following fields are minimum requirements for products to be published with the `live` status: \n - `name` \n - `default_rate` \n - `default_credit_limit_cents` \n `policies` (with an appropriate Base Policy Configuration)",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateProduct"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "products"
        ],
        "summary": "Get all available products",
        "description": "If you have configured and launched multiple products within Canopy, retrieve information related to all of your configured products at once.",
        "operationId": "getProducts",
        "parameters": [
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Products"
          },
          "404": {
            "description": "No Products"
          }
        }
      }
    },
    "/products/{product_id}": {
      "get": {
        "tags": [
          "products"
        ],
        "summary": "Get info on a particular product",
        "operationId": "getProduct",
        "description": "Using the `product_id` which was generated when the product was launched, retrieve information pertaining to a specific product.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the Products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Product"
          },
          "404": {
            "description": "No Products found"
          }
        }
      },
      "put": {
        "tags": [
          "products"
        ],
        "summary": "Update an existing product",
        "description": "Add additional configurations to a product. Products must be in the `draft` state to be updated.",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the product information was as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateProduct"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateProduct"
          },
          "422": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "products"
        ],
        "summary": "Delete an existing product",
        "description": "Delete an existing product. Product `status` must be `draft` to be deleted.",
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "description": "The Canopy-generated ID for your product.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/DeleteProduct"
          }
        }
      }
    },
    "/products/{product_id}/accounts": {
      "get": {
        "tags": [
          "products",
          "accounts"
        ],
        "summary": "Get all accounts created under a specific product",
        "description": "Returns all accounts created under a specific product. Results are paginated.",
        "operationId": "getProductAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "./responses/ProductAccounts.json"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/products/{product_id}/summaries": {
      "get": {
        "tags": [
          "accounts",
          "summary"
        ],
        "summary": "Get summary details for a specific product.",
        "description": "For analytic purposes, retrieve commonly needed summary statistics computed for a specific product.",
        "operationId": "getProductSummary",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the product summary information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "./responses/ProductSummary.json"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "accounts"
        ],
        "summary": "Get all available Accounts",
        "description": "Get details for all accounts linked to any of your products. Results are sorted by the date the account was created.",
        "operationId": "getAccounts",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated account requests sorted by account created date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of accounts to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Accounts"
          },
          "404": {
            "description": "No accounts found"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "tags": [
          "accounts",
          "programmatic"
        ],
        "summary": "Create a new customer account",
        "description": "An account should be created for each end user of each of your products. Once created, you will be able to add `line_items` to the account.",
        "operationId": "createAccount",
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateAccount"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateAccount"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/accounts/{account_id}": {
      "get": {
        "tags": [
          "accounts",
          "servicing"
        ],
        "summary": "Get a specific Account",
        "description": "",
        "operationId": "getAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a361c813-92e5-4765-82ea-9df368a81a89"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Account"
          },
          "404": {
            "description": "Account not found"
          }
        }
      },
      "put": {
        "tags": [
          "accounts",
          "programmatic"
        ],
        "summary": "Update a customer account",
        "description": "Update `rate` and/or `credit_limit_cents` for an individual account.",
        "operationId": "updateAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "a361c813-92e5-4765-82ea-9df368a81a89"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateAccount"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/UpdateAccount"
          },
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "accounts",
          "servicing"
        ],
        "summary": "Delete a specific Account",
        "description": "Deleting an account also deletes all of its associated line items.",
        "operationId": "deleteAccount",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Account Deleted"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items": {
      "get": {
        "tags": [
          "accounts",
          "line_items"
        ],
        "summary": "Get line items for a specific account.",
        "description": "Line Items for an Account consist of `charges` to the account and `payments` by the account holder. Results are paginated and sorted by line item effective date.",
        "operationId": "getAccountLineItems",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the line items were on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "line_item_type",
            "in": "query",
            "description": "The type of line items you would like to view. Options are `charges` and `payments`. If not provided, no filters will be applied.",
            "required": false,
            "schema": {
              "type": "string",
              "example": "charges"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-indexed starting point for paginated line item requests sorted by line item effective date.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "110"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of line items to be returned. Defaults to 100.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "number",
              "example": "50"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/LineItems"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/{line_item_id}": {
      "get": {
        "tags": [
          "line_items",
          "accounts"
        ],
        "summary": "Get information on a specific line item for a specific account",
        "description": "",
        "operationId": "getAccountLineItem",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "17d25206-1012-4576-89f0-c5fe128edd3e"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "8f0a3e81-24b9-4d32-b15b-a59257ed7485"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the products were as if I had asked on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/LineItem"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/charges": {
      "post": {
        "tags": [
          "line_items",
          "charges",
          "accounts"
        ],
        "summary": "Create a charge for a specific account",
        "description": "",
        "operationId": "createAccountCharge",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateCharge"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreateCharge"
          },
          "401": {
            "description": "You are not authenticated"
          },
          "403": {
            "description": "You are not authorized"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/payments": {
      "post": {
        "tags": [
          "line_items",
          "payments",
          "accounts"
        ],
        "summary": "Create a payment for a specific account",
        "description": "",
        "operationId": "createAccountPayment",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreatePayment"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/CreatePayment"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/line_items/{line_item_id}/disputes": {
      "post": {
        "tags": [
          "accounts",
          "line_items",
          "disputes"
        ],
        "summary": "Create a dispute for a specific account's line item",
        "description": "",
        "operationId": "createDispute",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "line_item_id",
            "in": "path",
            "description": "Line Item ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Response upon successful creation of a dispute",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "account_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "line_item_id": {
                      "type": "string",
                      "format": "uuid"
                    },
                    "dispute_id": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    },
    "/accounts/{account_id}/statements_list": {
      "get": {
        "tags": [
          "accounts",
          "summary"
        ],
        "summary": "Get a list of all current and prior statements for a specific account",
        "description": "List of statements for the account. To view line items for a specific statement, use the `/accounts/{account_id}/statements` route",
        "operationId": "getAccountStatementsList",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/StatementsList"
          }
        }
      }
    },
    "/accounts/{account_id}/statements": {
      "get": {
        "tags": [
          "accounts",
          "summary"
        ],
        "summary": "Get the current in-progress statement for a specific account.",
        "description": "This will return the most recent Statement information based on the `effective_as_of_date`. Relevant dates for an account's historical statements can be obtained from the `accounts/{account_id}/statements_list` route.",
        "operationId": "getAccountStatement",
        "parameters": [
          {
            "name": "account_id",
            "in": "path",
            "description": "Account ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "effective_as_of_date",
            "in": "query",
            "description": "The `Date-Time` you would like the system to return the data as of. IE tell me what the account information was on `2020-10-20 00:00:00 EST`. If empty it defaults to current time.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "./responses/AccountStatement.json"
          },
          "404": {
            "description": "Account not found"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header"
      }
    },
    "schemas": {
      "Account": {
        "$ref": "./schemas/Account.json"
      },
      "AccountStatement": {
        "$ref": "./schemas/AccountStatement.json"
      },
      "Product": {
        "$ref": "./schemas/Product.json"
      },
      "ProductSummary": {
        "$ref": "./schemas/ProductSummary.json"
      },
      "BasePolicyConfig": {
        "$ref": "./schemas/BasePolicyConfig.json"
      },
      "BasePolicyConfigMinPay": {
        "$ref": "./schemas/BasePolicyConfigMinPay.json"
      },
      "BasePolicyConfigBillingCycle": {
        "$ref": "./schemas/BasePolicyConfigBillingCycle.json"
      },
      "InterestPolicy": {
        "$ref": "./schemas/InterestPolicy.json"
      },
      "LineItem": {
        "$ref": "./schemas/LineItem.json"
      }
    },
    "requestBodies": {
      "CreateProduct": {
        "$ref": "./requestBodies/CreateProduct.json"
      },
      "CreateAccount": {
        "$ref": "./requestBodies/CreateAccount.json"
      },
      "UpdateAccount": {
        "$ref": "./requestBodies/UpdateAccount.json"
      },
      "CreateCharge": {
        "$ref": "./requestBodies/CreateCharge.json"
      },
      "CreatePayment": {
        "$ref": "./requestBodies/CreatePayment.json"
      }
    },
    "responses": {
      "CreateProduct": {
        "$ref": "./responses/CreateProduct.json"
      },
      "Product": {
        "$ref": "./responses/Product.json"
      },
      "Products": {
        "$ref": "./responses/Products.json"
      },
      "DeleteProduct": {
        "$ref": "./responses/DeleteProduct.json"
      },
      "CreateAccount": {
        "$ref": "./responses/CreateAccount.json"
      },
      "Accounts": {
        "$ref": "./responses/Accounts.json"
      },
      "UpdateAccount": {
        "$ref": "./responses/UpdateAccount.json"
      },
      "CreateCharge": {
        "$ref": "./responses/CreateCharge.json"
      },
      "CreatePayment": {
        "$ref": "./responses/CreatePayment.json"
      },
      "Account": {
        "$ref": "./responses/Account.json"
      },
      "AccountStatement": {
        "$ref": "./responses/AccountStatement.json"
      },
      "ProductAccounts": {
        "$ref": "./responses/ProductAccounts.json"
      },
      "ProductSummary": {
        "$ref": "./responses/ProductSummary.json"
      },
      "LineItem": {
        "$ref": "./responses/LineItem.json"
      },
      "LineItems": {
        "$ref": "./responses/LineItems.json"
      },
      "StatementsList": {
        "$ref": "./responses/StatementsList.json"
      },
      "CreateUser": {
        "$ref": "./responses/CreateUser.json"
      }
    }
  }
}
