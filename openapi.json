{
	"openapi": "3.0.0",
	"info": {
		"title": "Canopy Servicing",
		"description": "Canopy Core API",
		"termsOfService": "https://api.canopyservicing.com/terms/",
		"contact": {
			"email": "will@canopyservicing.com"
		},
		"version": "1.3"
	},
	"servers": [
		{
			"url": "https://virtserver.swaggerhub.com/CanopyServicing/CanopyAPI/1.0.0",
			"description": "SwaggerHub API Auto Mocking"
		},
		{
			"url": "https://api.canopyservicing.com",
			"description": "Production"
		},
		{
			"url": "https://6mgngrzp51.execute-api.us-east-1.amazonaws.com/dev",
			"description": "Sandbox"
		}
	],
	"security": [
		{
			"api_key": []
		}
	],
	"tags": [
		{
			"name": "accounts",
			"description": "Customer based accounts that support balances, history, and other activity."
		},
		{
			"name": "line_items",
			"description": "Transactions, Offsets, Fees and things that are calculated within a balance of an account"
		},
		{
			"name": "products",
			"description": "Products are the highest level of configuration within the Canopy system and represent the primary financial program you offer such as a traditional credit, line of credit, or installment based product construct."
		},
		{
			"name": "plans",
			"description": "Plans are effectively sub-programs of Products and are where you can configure different Policies for a different group of customers"
		},
		{
			"name": "policies",
			"description": "Policies drive the behavior of Products, Plans and Promotions down to the Transaction level."
		},
		{
			"name": "balances",
			"description": "Balances are predefiend summations of customer account activity such as total principal balance and total account balance"
		},
		{
			"name": "disputes",
			"description": "An extension of credit for property or services not accepted by the consumer or the consumer's designee, or not delivered to the consumer or the consumer's designee as agreed."
		},
		{
			"name": "statements",
			"description": "Statements represent customer account activity over a billing cycle"
		},
		{
			"name": "users",
			"description": "Users are individuals that have access to a customer account"
		},
		{
			"name": "compliance",
			"description": "Compliance"
		},
		{
			"name": "charges",
			"description": "Charges"
		},
		{
			"name": "payments",
			"description": "Payments"
		},
		{
			"name": "balance_transfers",
			"description": "Balance transfers"
		},
		{
			"name": "fees",
			"description": "Fees"
		},
		{
			"name": "cash_advances",
			"description": "Cash advances"
		},
		{
			"name": "credit_adjustments",
			"description": "Credit adjustments"
		},
		{
			"name": "debit_adjustments",
			"description": "Debit adjustments"
		},
		{
			"name": "chargebacks",
			"description": "Chargebacks"
		},
		{
			"name": "payment_reversals",
			"description": "Payment reversals"
		},
		{
			"name": "refunds",
			"description": "Refunds"
		}
	],
	"paths": {
		"/accounts": {
			"get": {
				"tags": ["accounts"],
				"summary": "Get all available Accounts",
				"operationId": "getAccounts",
				"parameters": [
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the account was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Accounts",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Account"
									}
								}
							}
						}
					},
					"404": {
						"description": "No accounts found"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["accounts"],
				"summary": "Create a new customer account",
				"operationId": "createAccount",
				"requestBody": {
					"description": "Account",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Account"
							}
						}
					},
					"required": true
				},
				"responses": {
					"201": {
						"description": "New Account Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Account"
								}
							}
						}
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"security": [
					{
						"api_key": []
					}
				],
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}": {
			"get": {
				"tags": ["accounts"],
				"summary": "Get a specific Account",
				"operationId": "getAccount",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the account was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Account",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Account"
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["accounts"],
				"summary": "Delete a specific Account",
				"operationId": "deleteAccount",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Account Deleted"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["accounts"],
				"summary": "Update a specific Account",
				"operationId": "putUpdateAccount",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/AccountUpdate"
				},
				"responses": {
					"204": {
						"description": "Account Modified"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/policies": {
			"get": {
				"tags": ["accounts", "policies"],
				"description": "Get a specific Account's currently enrolled policies",
				"operationId": "getAccountPolicies",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the policies were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"$ref": "#/components/responses/AccountPolicies"
					},
					"404": {
						"description": "Account not found"
					}
				}
			}
		},
		"/accounts/{account_id}/line_items": {
			"get": {
				"tags": ["accounts", "line_items"],
				"summary": "Get a specific Account's line items",
				"operationId": "getAccountLineItems",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Item ID's",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/line_items/{line_item_id}/disputes": {
			"post": {
				"tags": ["accounts", "line_items", "disputes"],
				"summary": "Create a Dispute for a specific Account's Line Item",
				"operationId": "createDispute",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Dispute Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/disputes": {
			"get": {
				"tags": ["disputes"],
				"summary": "Get all available Disputes",
				"operationId": "getDisputes",
				"parameters": [
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the disputes were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Dispute ID's",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/disputes": {
			"get": {
				"tags": ["accounts", "disputes"],
				"summary": "Get all available Disputes for a specific Account",
				"operationId": "getAccountDisputes",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the disputes were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Dispute ID's",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/disputes/{dispute_id}": {
			"get": {
				"tags": ["disputes"],
				"summary": "Get info on a specific Dispute for a specific Account's Line Item",
				"operationId": "getDispute",
				"parameters": [
					{
						"name": "dispute_id",
						"in": "path",
						"description": "Dispute ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the dispute status was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Dispute",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Dispute"
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["disputes"],
				"summary": "Delete a specifc a Dispute for a specific Account's Line Item",
				"operationId": "deleteDispute",
				"parameters": [
					{
						"name": "dispute_id",
						"in": "path",
						"description": "Dispute ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Dispute Deleted"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["disputes"],
				"summary": "Update status of a dispute for a specific Account's Line Item",
				"operationId": "updateDispute",
				"parameters": [
					{
						"name": "dispute_id",
						"in": "path",
						"description": "Dispute ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/DisputeUpdate"
				},
				"responses": {
					"204": {
						"description": "Dispute Updated"
					},
					"404": {
						"description": "Dispute not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/users": {
			"get": {
				"tags": ["accounts", "users"],
				"summary": "Get a specific Account's users",
				"operationId": "getAccountUsers",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the users status was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of User ID's",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/available_statuses": {
			"get": {
				"tags": ["accounts"],
				"summary": "Get a specific Account's available statuses it can move to",
				"operationId": "getAccountAvailableStatuses",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the available statuses were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Arrray of Status ID's",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/balances": {
			"get": {
				"tags": ["accounts", "balances"],
				"summary": "Get a specific Account's Balances",
				"operationId": "getAccountBalances",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the balances were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Arrray of Balances",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Balance"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/balances/{balance_id}": {
			"get": {
				"tags": ["accounts", "balances"],
				"summary": "Get a specific Account's Specific Balance",
				"operationId": "getAccountBalance",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "balance_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the balance was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Balance",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Balance"
								}
							}
						}
					},
					"404": {
						"description": "Account or Balance not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/statements": {
			"get": {
				"tags": ["accounts", "statements"],
				"summary": "Get a specific Account's Statements",
				"operationId": "getAccountStatements",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Statement ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the statements were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Statements",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Statement"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/statements/{statement_id}": {
			"get": {
				"tags": ["accounts", "statements"],
				"summary": "Get a specific Account's Specific Statement",
				"operationId": "getAccountStatement",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "statement_id",
						"in": "path",
						"description": "Statement ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the statement data was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time. (statements are imutable)",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Statement",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Statement"
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/accounts/{account_id}/history": {
			"get": {
				"tags": ["accounts", "compliance"],
				"summary": "Get a specific Account's history of Events.",
				"operationId": "getAccountHistory",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the history of this account was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time. (statements are imutable)",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "History of Account Events",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Event"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items": {
			"get": {
				"tags": ["line_items"],
				"summary": "Get all available Line Items",
				"operationId": "getLineItems",
				"parameters": [
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the statement data was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time. (statements are imutable)",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Line Items not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}": {
			"get": {
				"tags": ["line_items"],
				"summary": "Get a specific Line Item's details",
				"operationId": "getLineItem",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Line Item was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Line Item",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LineItem"
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["line_items"],
				"summary": "Delete a specific Line Item's details",
				"operationId": "deleteLineItem",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Line Item Deleted",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"type": "string",
										"description": "line item status id",
										"format": "uuid"
									}
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["line_items"],
				"summary": "Update a specific Line Item's details",
				"operationId": "updateLineItem",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Line Item Updated"
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}/available_statuses": {
			"get": {
				"tags": ["line_items"],
				"summary": "Get a specific Line Item's available statuses it can move to",
				"operationId": "getLineItemAvailableStatuses",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Availabke Line Item Statuses were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Item Status"
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}/balances": {
			"get": {
				"tags": ["line_items", "balances"],
				"summary": "Get a specific Line Item's balances",
				"operationId": "getLineItemBalances",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the balances were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Balances",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Balance"
									}
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}/balances/{balance_id}": {
			"get": {
				"tags": ["line_items", "balances"],
				"summary": "Get a specific Line Item's specific Balance",
				"operationId": "getLineItemBalance",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "balance_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the balance was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Balance",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Balance"
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}/history": {
			"get": {
				"tags": ["line_items", "compliance"],
				"summary": "Get a specific Line Item's history of events",
				"operationId": "getLineItemHistory",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Line Item History was on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "History of Account Events",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Event"
									}
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/line_items/{line_item_id}/policies": {
			"get": {
				"tags": ["line_items", "policies"],
				"summary": "Get a specific Line Item's list of policies",
				"operationId": "getLineItemPolicies",
				"parameters": [
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Line Item ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the policies were on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Policies",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Policy"
									}
								}
							}
						}
					},
					"404": {
						"description": "Line Item not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/charges": {
			"get": {
				"tags": ["line_items", "charges", "accounts"],
				"summary": "Get a specific Account's charges",
				"operationId": "getAccountCharges",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the charges were as if it was '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "charges", "accounts"],
				"summary": "Create a Charge for a specific Account",
				"operationId": "createAccountCharge",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/ChargeCreate"
				},
				"responses": {
					"204": {
						"description": "Charge Created"
					},
					"401": {
						"description": "You are not authenticated"
					},
					"403": {
						"description": "You are not authorized"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/payments": {
			"get": {
				"tags": ["line_items", "payments", "accounts"],
				"summary": "Get a specific Account's payments",
				"operationId": "getAccountPayments",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Payments were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account or Line Items not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "payments", "accounts"],
				"summary": "Create a Payment for a specific Account",
				"operationId": "createAccountPayment",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/PaymentCreate"
				},
				"responses": {
					"204": {
						"description": "Payment Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/fees": {
			"get": {
				"tags": ["line_items", "fees", "accounts"],
				"summary": "Get a specific Account's Fees",
				"operationId": "getAccountFees",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Fees were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "fees", "accounts"],
				"summary": "Create a Fee for a specific Account",
				"operationId": "createAccountFee",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/FeeCreate"
				},
				"responses": {
					"204": {
						"description": "Fee Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/cash_advances": {
			"get": {
				"tags": ["line_items", "cash_advances", "accounts"],
				"summary": "Get a specific Account's Cash Advances",
				"operationId": "getAccountCashAdvances",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Fees were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "cash_advances", "accounts"],
				"summary": "Create a Cash Advance for a specific Account",
				"operationId": "createAccountCashAdvance",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/CashAdvanceCreate"
				},
				"responses": {
					"204": {
						"description": "Cash Advance Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/balance_transfers": {
			"get": {
				"tags": ["line_items", "balance_transfers", "accounts"],
				"summary": "Get a specific Account's Balance Transfer",
				"operationId": "getAccountBalanceTransfers",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Fees were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "balance_transfers", "accounts"],
				"summary": "Create a Balance Transfer for a specific Account",
				"operationId": "createAccountBalanceTransfer",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/AccountBalanceTransferCreate"
				},
				"responses": {
					"204": {
						"description": "Balance Transfer Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/credit_adjustments": {
			"get": {
				"tags": ["line_items", "credit_adjustments", "accounts"],
				"summary": "Get a specific Account's Credit Adjustment",
				"operationId": "getAccountCreditAdjustments",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Fees were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "credit_adjustments", "accounts"],
				"summary": "Create a Credit Adjustment for a specific Account",
				"operationId": "createAccountCreditAdjustment",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/CreditAdjustmentCreate"
				},
				"responses": {
					"204": {
						"description": "Credit Adjustment Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/debit_adjustments": {
			"get": {
				"tags": ["line_items", "debit_adjustments", "accounts"],
				"summary": "Get a specific Account's Debit Adjustment",
				"operationId": "getAccountDebitAdjustments",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Fees were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Line Items",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/LineItem"
									}
								}
							}
						}
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["line_items", "debit_adjustments", "accounts"],
				"summary": "Create a Dedit Adjustment for a specific Account",
				"operationId": "createAccountDebitAdjustment",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/DebitAdjustmentCreate"
				},
				"responses": {
					"204": {
						"description": "Debit Adjustment Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/{line_item_id}/chargebacks": {
			"post": {
				"tags": ["line_items", "chargebacks", "accounts"],
				"summary": "Create a Chargeback for a specific Account's Line Item",
				"operationId": "createAccountLineItemChargeback",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/ChargebackCreate"
				},
				"responses": {
					"204": {
						"description": "Chargeback Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/{line_item_id}/refund": {
			"post": {
				"tags": ["line_items", "refunds", "accounts"],
				"summary": "Create a Refund for a specific Account's Line Item",
				"operationId": "createAccountLineItemRefund",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/RefundLineItemCreate"
				},
				"responses": {
					"204": {
						"description": "Line Item Refund Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/account/{account_id}/line_items/{line_item_id}/payment_reversals": {
			"post": {
				"tags": ["line_items", "payment_reversals", "accounts"],
				"summary": "Create a Payment Reversal for a specific Account's Line Item",
				"operationId": "createAccountLineItemPaymentReversal",
				"parameters": [
					{
						"name": "account_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "line_item_id",
						"in": "path",
						"description": "Account ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/PaymentReversalCreate"
				},
				"responses": {
					"204": {
						"description": "Chargeback Created"
					},
					"404": {
						"description": "Account not found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/products": {
			"get": {
				"tags": ["products"],
				"summary": "Get all available Products",
				"operationId": "getProducts",
				"parameters": [
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the products were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Products",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/Product"
									}
								}
							}
						}
					},
					"404": {
						"description": "No Products"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["products"],
				"summary": "Create a new Product",
				"operationId": "createProduct",
				"requestBody": {
					"$ref": "#/components/requestBodies/ProductCreate"
				},
				"responses": {
					"204": {
						"description": "Product Created"
					},
					"422": {
						"description": "Invalid input"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/products/{product_id}": {
			"get": {
				"tags": ["products"],
				"summary": "Get info on a particular Product",
				"operationId": "getProduct",
				"parameters": [
					{
						"name": "product_id",
						"in": "path",
						"description": "Product ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Products were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Product",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Product"
								}
							}
						}
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["products"],
				"summary": "Delete a particular Product",
				"operationId": "deleteProduct",
				"parameters": [
					{
						"name": "product_id",
						"in": "path",
						"description": "Product ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Product Deleted"
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["products"],
				"summary": "Update a specific Product",
				"operationId": "updateProduct",
				"parameters": [
					{
						"name": "product_id",
						"in": "path",
						"description": "Product ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Product Updated"
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/products/{product_id}/plans": {
			"get": {
				"tags": ["products", "plans"],
				"summary": "Get all available Plans for a specific Product",
				"operationId": "getPlans",
				"parameters": [
					{
						"name": "product_id",
						"in": "path",
						"description": "Product ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Product was as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of Plans",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"description": "Array of Plans",
									"items": {
										"$ref": "#/components/schemas/Plan"
									}
								}
							}
						}
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["products", "plans"],
				"summary": "Create a plan for a specific Product",
				"operationId": "createPlan",
				"parameters": [
					{
						"name": "product_id",
						"in": "path",
						"description": "Product ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"requestBody": {
					"$ref": "#/components/requestBodies/PlanCreate"
				},
				"responses": {
					"204": {
						"description": "Plan Created"
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/plans/{plan_id}": {
			"get": {
				"tags": ["plans"],
				"summary": "Get info on a specific Plan",
				"operationId": "getPlan",
				"parameters": [
					{
						"name": "plan_id",
						"in": "path",
						"description": "Plan ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Plan was as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Plan",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Plan"
								}
							}
						}
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["plans"],
				"summary": "Delete a specific Plan",
				"operationId": "deletePlan",
				"parameters": [
					{
						"name": "plan_id",
						"in": "path",
						"description": "Plan ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Plan Deleted"
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["plans"],
				"summary": "Update a specific plan",
				"operationId": "updatePlan",
				"parameters": [
					{
						"name": "plan_id",
						"in": "path",
						"description": "Plan ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "Plan Updated"
					},
					"405": {
						"description": "Invalid input"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/users": {
			"get": {
				"tags": ["users"],
				"summary": "get all available Users",
				"operationId": "getUsers",
				"parameters": [
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the Users were as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Array of Users",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						}
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			},
			"post": {
				"tags": ["users"],
				"summary": "Create a new User",
				"operationId": "createUser",
				"responses": {
					"204": {
						"description": "User Created"
					},
					"404": {
						"description": "No Products found"
					}
				},
				"description": "Lorem ipsum"
			}
		},
		"/users/{user_id}": {
			"get": {
				"tags": ["users"],
				"summary": "get info on a specific User",
				"operationId": "getUser",
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					},
					{
						"name": "effective_as_of_date",
						"in": "query",
						"description": "The Date-Time you would like the system to return the data as of. IE tell me what the User was as if I had asked on '2020-10-20 00:00:00 EST'. If empty it defaults to current time.",
						"required": false,
						"style": "form",
						"explode": true,
						"schema": {
							"type": "string",
							"format": "date-time"
						}
					}
				],
				"responses": {
					"200": {
						"description": "User",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/User"
								}
							}
						}
					},
					"404": {
						"description": "No User found"
					}
				},
				"description": "Lorem ipsum"
			},
			"delete": {
				"tags": ["users"],
				"summary": "Delete a specific User",
				"operationId": "deleteUser",
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "User Deleted"
					},
					"404": {
						"description": "No User found"
					}
				},
				"description": "Lorem ipsum"
			},
			"patch": {
				"tags": ["users"],
				"summary": "Update a specific User",
				"operationId": "updateUser",
				"parameters": [
					{
						"name": "user_id",
						"in": "path",
						"description": "User ID",
						"required": true,
						"style": "simple",
						"explode": false,
						"schema": {
							"type": "string",
							"format": "uuid"
						}
					}
				],
				"responses": {
					"204": {
						"description": "User Updated"
					},
					"404": {
						"description": "No User found"
					}
				},
				"description": "Lorem ipsum"
			}
		}
	},
	"components": {
		"schemas": {
			"Dispute": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"dispute_id": {
						"type": "string",
						"format": "uuid"
					},
					"effective_at": {
						"type": "string",
						"description": "the date-time that this Dispute became/becomes active",
						"format": "date-time"
					},
					"created_at": {
						"type": "string",
						"description": "the date-time which the Dispute was created in the API",
						"format": "date-time"
					},
					"status": {
						"type": "string",
						"description": "Current Status of the Dispute",
						"enum": ["pending", "cx_won", "cx_lost", "refunded"]
					},
					"history": {
						"type": "array",
						"description": "Array of changes with timestamps for this Dispute",
						"items": {
							"$ref": "#/components/schemas/Event"
						}
					},
					"disputed_line_item_id": {
						"type": "string",
						"format": "uuid"
					},
					"affected_line_items": {
						"type": "array",
						"items": {
							"type": "string",
							"format": "uuid"
						}
					}
				}
			},
			"User": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"id": {
						"type": "integer",
						"format": "int64"
					},
					"username": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"phone": {
						"type": "string"
					},
					"user_status": {
						"type": "string",
						"description": "User Status ID",
						"format": "uuid"
					}
				}
			},
			"Account": {
				"required": ["account_id", "effective_at", "product_id"],
				"additionalProperties": false,
				"type": "object",
				"properties": {
					"account_id": {
						"type": "string",
						"format": "uuid"
					},
					"account_status": {
						"type": "string",
						"description": "the Status of the Account. eg 'suspended' or 'closed'"
					},
					"account_status_subtype": {
						"type": "string",
						"description": "the subtype of the Status of the Account. eg 'delinquent' or 'bankruptcy'"
					},
					"effective_at": {
						"type": "string",
						"description": "the date-time that this account became/becomes active",
						"format": "date-time"
					},
					"created_at": {
						"type": "string",
						"description": "the date-time which the account was created in the API",
						"format": "date-time"
					},
					"available_policy_sets": {
						"type": "array",
						"description": "An array of the eligble Plans/Promos for this Account",
						"items": {
							"$ref": "#/components/schemas/Account_available_policy_sets"
						}
					},
					"default_policy_set": {
						"$ref": "#/components/schemas/Account_default_policy_set"
					},
					"current_policy_set": {
						"$ref": "#/components/schemas/Account_current_policy_set"
					},
					"product_id": {
						"type": "string",
						"description": "the Product ID of the account",
						"format": "uuid"
					},
					"plan_id": {
						"type": "string",
						"description": "the Plan ID of the account",
						"format": "uuid"
					},
					"external_account_ids": {
						"type": "array",
						"description": "An Array of External Account IDs",
						"items": {
							"$ref": "#/components/schemas/Account_external_account_ids"
						}
					},
					"credit_limit_cents": {
						"type": "integer",
						"description": "Total Amount (in cents) that this account can borrow."
					},
					"account_apr_lower_bound": {
						"type": "number",
						"description": "The Lower bound of the APR this account was approved for"
					},
					"account_apr_upper_bound": {
						"type": "number",
						"description": "The Upper bound of the APR this account was approved for"
					},
					"eligble_promos": {
						"type": "array",
						"description": "An array of potential promos that can applied to line items",
						"items": {
							"type": "string",
							"description": "ID of the eligible Promo",
							"format": "uuid"
						}
					},
					"assigned_promo": {
						"type": "string",
						"description": "the ID of the currently Assigned Promo",
						"format": "uuid"
					},
					"agreements": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"auto_pay_settings": {
						"type": "object"
					},
					"policies": {
						"type": "array",
						"description": "An Array of Policies currently set for this account.",
						"items": {
							"type": "object"
						}
					}
				}
			},
			"LineItem": {
				"required": ["account_id", "effective_at", "line_item_id", "product_id", "type"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"account_id": {
						"type": "string",
						"format": "uuid"
					},
					"line_item_id": {
						"type": "string",
						"format": "uuid"
					},
					"line_item_status": {
						"type": "string",
						"description": "the corresponding Status for a line item",
						"enum": ["valid", "invalid", "pending"]
					},
					"line_item_status_details": {
						"type": "string",
						"description": "the corresponding Status for a line item",
						"enum": [
							"authorized",
							"posted",
							"declined",
							"void",
							"approved",
							"successful",
							"pending",
							"unsuccessful"
						]
					},
					"dispute": {
						"type": "string",
						"description": "ID of a dispute (if any) relating to this line item",
						"format": "uuid"
					},
					"type": {
						"type": "string",
						"description": "The Line Item Type. For Example 'Charge'",
						"enum": [
							"charge",
							"cash_advance",
							"balance_transfer",
							"credit_adjustment",
							"chargeback",
							"refund",
							"payment",
							"payment_reversal",
							"fee",
							"debit_adjustment"
						]
					},
					"amount_cents": {
						"type": "integer",
						"description": "The originating amount of money (in cents) relating to this line item."
					},
					"current_policy_set": {
						"$ref": "#/components/schemas/LineItem_current_policy_set"
					},
					"merchant-data": {
						"$ref": "#/components/schemas/LineItem_merchantdata"
					},
					"subtype": {
						"type": "string",
						"description": "A more detailed description of the Line Item Type. For Example 'Charge-Promotion'."
					},
					"effective_at": {
						"type": "string",
						"description": "The Date-Time that this account became/becomes active",
						"format": "date-time"
					},
					"created_at": {
						"type": "string",
						"description": "The Date-Time which the account was created in the API",
						"format": "date-time"
					},
					"plan_id": {
						"type": "string",
						"description": "the Plan ID if the account is enrolled in a plan",
						"format": "uuid"
					},
					"product_id": {
						"type": "string",
						"description": "the Product ID of the account",
						"format": "uuid"
					},
					"associated_line_items": {
						"type": "array",
						"description": "An Array of related Line Items. IE if this is a credit adjusted it might be in relation to a specific charge. OR a refund that is for a specific charge.",
						"items": {
							"type": "string",
							"format": "uuid"
						}
					},
					"description": {
						"type": "string",
						"description": "A description of this particular line item if any. More common for adjustments."
					},
					"user_id": {
						"type": "string",
						"description": "the User ID that created this Line Item",
						"format": "uuid"
					},
					"eligble_promos": {
						"type": "array",
						"description": "An array of potential promos that can applied to line items",
						"items": {
							"type": "string",
							"description": "ID of the eligible Promo",
							"format": "uuid"
						}
					},
					"assigned_promo": {
						"type": "string",
						"description": "the ID of the currently Assigned Promo",
						"format": "uuid"
					},
					"external_ids": {
						"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
					}
				},
				"description": "An individual charge, payment, fee, or otherwise financial event that is used to calculate balances."
			},
			"Statement": {
				"required": ["statement_id"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"statement_id": {
						"type": "string",
						"format": "uuid"
					},
					"name": {
						"type": "string",
						"description": "informal name of the Statement. IE '2020-02'"
					},
					"general_summary": {
						"$ref": "#/components/schemas/Statement_general_summary"
					},
					"account_summary": {
						"$ref": "#/components/schemas/Statement_account_summary"
					},
					"payments_and_credits_summary": {
						"$ref": "#/components/schemas/Statement_payments_and_credits_summary"
					},
					"payment_details": {
						"type": "array",
						"description": "Array of Payments made during this statement.",
						"items": {
							"$ref": "#/components/schemas/LineItem"
						}
					},
					"credit_details": {
						"type": "array",
						"description": "Array of Credits made during this statement.",
						"items": {
							"$ref": "#/components/schemas/LineItem"
						}
					},
					"charge_details": {
						"type": "array",
						"description": "Array of Charges made during this statement.",
						"items": {
							"$ref": "#/components/schemas/LineItem"
						}
					},
					"fee_details": {
						"type": "array",
						"description": "Array of Fees made during this statement.",
						"items": {
							"$ref": "#/components/schemas/LineItem"
						}
					},
					"interest_details": {
						"type": "array",
						"description": "Array of Interest Charge calculations based on balance type for this statement.",
						"items": {
							"$ref": "#/components/schemas/Statement_interest_details"
						}
					},
					"transaction_history": {
						"type": "array",
						"items": {
							"type": "object"
						}
					},
					"balances": {
						"type": "array",
						"items": {
							"type": "object"
						}
					}
				}
			},
			"Product": {
				"required": ["policies", "product_id"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"product_id": {
						"type": "string",
						"format": "uuid"
					},
					"name": {
						"type": "string",
						"description": "Name of Product. IE Express Card."
					},
					"description": {
						"type": "string",
						"description": "Description of the Product."
					},
					"created_at": {
						"type": "string",
						"description": "The date-time that this Product was created on the server.",
						"format": "date-time"
					},
					"type": {
						"type": "string",
						"description": "The Type of Product",
						"enum": ["line of credit", "credit", "installment"]
					},
					"start_date": {
						"type": "string",
						"description": "The Date-Time this Product becomes available for use",
						"format": "date-time"
					},
					"end_date": {
						"type": "string",
						"description": "The Date-Time this Product is no longer available for use",
						"format": "date-time"
					},
					"policies": {
						"type": "array",
						"description": "An Array of policies that drive Product behaviour.",
						"items": {
							"type": "object"
						}
					},
					"status": {
						"type": "string",
						"description": "The Status ID of a Product",
						"format": "uuid"
					},
					"edit_history": {
						"$ref": "#/components/schemas/Product_edit_history"
					},
					"current_accounts": {
						"type": "array",
						"description": "Array of Accounts that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Account ID",
							"format": "uuid"
						}
					},
					"current_line_items": {
						"type": "array",
						"description": "Array of Line Items that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Line Item ID",
							"format": "uuid"
						}
					}
				}
			},
			"Plan": {
				"required": ["plan_id", "policies", "product_id"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"plan_id": {
						"type": "string",
						"format": "uuid"
					},
					"product_id": {
						"type": "string",
						"format": "uuid"
					},
					"name": {
						"type": "string",
						"description": "Name of Plan"
					},
					"description": {
						"type": "string",
						"description": "Description of the Plan."
					},
					"created_at": {
						"type": "string",
						"description": "The Date-Time that this plan was created on the server.",
						"format": "date-time"
					},
					"start_date": {
						"type": "string",
						"description": "The Date-Time that this plan is available for use.",
						"format": "date-time"
					},
					"end_date": {
						"type": "string",
						"description": "The Date-time when this Plan is no longer available for use.",
						"format": "date-time"
					},
					"policies": {
						"type": "array",
						"description": "An Array of policies that drive plan behaviour.",
						"items": {
							"type": "object"
						}
					},
					"status": {
						"type": "string",
						"description": "The Status ID of a Plan",
						"format": "uuid"
					},
					"edit_history": {
						"$ref": "#/components/schemas/Plan_edit_history"
					},
					"current_accounts": {
						"type": "array",
						"description": "Array of Accounts that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Account ID",
							"format": "uuid"
						}
					},
					"current_line_items": {
						"type": "array",
						"description": "Array of Line Items that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Line Item ID",
							"format": "uuid"
						}
					}
				}
			},
			"InterestPolicy": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"type": {
						"type": "string",
						"enum": ["simple", "compound"]
					},
					"method": {
						"type": "string",
						"description": "the actual base formula used to calculate and assign interest",
						"enum": [
							"average daily balance",
							"ending daily balance",
							"average monthly balance",
							"ending monthly balance"
						]
					},
					"day_calc_type": {
						"type": "string",
						"description": "Affects the base calculation by determining how many days there are in a given year.",
						"enum": ["360", "365"]
					},
					"interest_calc_time": {
						"type": "string",
						"description": "the interest for this policy calculates based on this time + the interval time",
						"format": "date-time"
					},
					"interest_calc_interval": {
						"type": "string",
						"description": "the interval that defines how often this policy charges interest. IE '1 day'",
						"format": "interval"
					},
					"precision": {
						"type": "integer",
						"description": "The number of significant digits used for calculating interest. Helpful Tip - the precision/rounding of interest represented on statements is a separate config under statements."
					},
					"post_precsion_method": {
						"type": "string",
						"description": "This is what we do with the digits remaining after the given precision. IE does 7.5 cents owed become 8 cents owed or 7 cents owed.",
						"enum": ["floor", "ceiling", "conventional", "bankers/gaussian", "halfdown"]
					},
					"min_daily_line_item_interest_rollup_cents": {
						"type": "integer",
						"description": "If a daily interest amount for a line item is below this, then round the interest up to this amount."
					},
					"min_daily_account_interest_rollup_cents": {
						"type": "integer",
						"description": "If the sum of all interest for an account is below this, then create a account level interest charge to meet this minimum."
					},
					"min_statement_interest_rollup_cents": {
						"type": "integer",
						"description": "If a monthly statement amount is below this, then round the interest up to this amount."
					},
					"default_rate": {
						"type": "number",
						"description": "the default rate for this interest policy. Typically a rate is selected at the time of assigning an account to a plan or creating a line item."
					},
					"rate_floor": {
						"type": "number",
						"description": "for line items and account enrolled on this interest policy, they will be required to be equal to or greater than this amount."
					},
					"rate_ceiling": {
						"type": "number",
						"description": "for line items and account enrolled on this interest policy, they will be required to be equal to or less than this amount."
					},
					"interest_cap": {
						"type": "number",
						"description": "the total % of interest allowable against the principal. After this cap is met, no additonal interest will be charged."
					},
					"term": {
						"type": "string",
						"description": "If applicable. the length of term for interest. This is important for installment",
						"format": "interval"
					}
				},
				"description": "the Interest Object"
			},
			"Promo": {
				"required": ["type"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"type": {
						"type": "string",
						"description": "Whether this Promo applies to a Line Item or Account",
						"enum": ["account", "line item"]
					},
					"interest_type": {
						"type": "string",
						"description": "The Type of Promo",
						"enum": ["deferred interest", "installment", "adjusted rate"]
					},
					"eligibility_logic": {
						"type": "string",
						"description": "The logic that determine if the line item or account is elligble for this promo"
					},
					"promo_id": {
						"type": "string",
						"format": "uuid"
					},
					"current_plans": {
						"type": "array",
						"description": "Array of Plans that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Plan ID",
							"format": "uuid"
						}
					},
					"current_products": {
						"type": "array",
						"description": "Array of Products that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Product ID",
							"format": "uuid"
						}
					},
					"current_accounts": {
						"type": "array",
						"description": "Array of Accounts that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Account ID",
							"format": "uuid"
						}
					},
					"current_line_items": {
						"type": "array",
						"description": "Array of Line Items that are currently using this Promo",
						"items": {
							"type": "string",
							"description": "Line Item ID",
							"format": "uuid"
						}
					},
					"name": {
						"type": "string",
						"description": "Name of Promo"
					},
					"description": {
						"type": "string",
						"description": "Description of the Promo."
					},
					"created_at": {
						"type": "string",
						"description": "The Date-Time that this Promo was created on the server.",
						"format": "date-time"
					},
					"start_date": {
						"type": "string",
						"description": "The Date-Time that this Promo is available for new enrollments.",
						"format": "date-time"
					},
					"end_date": {
						"type": "string",
						"description": "The Date-time when this Promo is no longer available for new enrollments.",
						"format": "date-time"
					},
					"promo_period": {
						"type": "string",
						"description": "the Interval that this Promo lasts before reverting to another set of policies (IE `180 days` or `9 months`)"
					},
					"fixed_interest_rate": {
						"type": "number",
						"description": "the fixed Promotional interest rate"
					},
					"policies": {
						"type": "array",
						"description": "An Array of policies that drive Promo behaviour.",
						"items": {
							"type": "object"
						}
					},
					"status": {
						"type": "string",
						"description": "The Status ID of a Promo",
						"format": "uuid"
					},
					"edit_history": {
						"$ref": "#/components/schemas/Promo_edit_history"
					},
					"disclosure": {
						"type": "string",
						"description": "The ID of the Disclosure",
						"format": "uuid"
					}
				}
			},
			"BasePolicyConfig": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"min_pay": {
						"$ref": "#/components/schemas/BasePolicyConfig_min_pay"
					},
					"new_charge_grace_period": {
						"$ref": "#/components/schemas/BasePolicyConfig_new_charge_grace_period"
					},
					"new_account_grace_period": {
						"$ref": "#/components/schemas/BasePolicyConfig_new_account_grace_period"
					},
					"billing_cycle": {
						"$ref": "#/components/schemas/BasePolicyConfig_billing_cycle"
					}
				},
				"description": "A base group of policies that define a Product/Plan/Promo"
			},
			"FeePolicyConfig": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"repeating_fees": {
						"type": "array",
						"description": "An Array of time based repeating fees like annual fee.",
						"items": {
							"$ref": "#/components/schemas/FeePolicyConfig_repeating_fees"
						}
					},
					"account_fees": {
						"$ref": "#/components/schemas/FeePolicyConfig_account_fees"
					},
					"statement_fees": {
						"$ref": "#/components/schemas/FeePolicyConfig_statement_fees"
					},
					"transaction_fees": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees"
					}
				},
				"description": "A group of fees that are enabled with various configs for a plan/product/promo"
			},
			"ComplianceGuard": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"statement_rules": {
						"type": "object"
					},
					"fee_rules": {
						"type": "object"
					}
				},
				"description": "the values tha represent your compliance standards you would like to enforce on all events"
			},
			"Policy": {
				"required": ["policy_id"],
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"policy_id": {
						"type": "string",
						"format": "uuid"
					},
					"enrolled_on_products": {
						"type": "array",
						"items": {
							"type": "string",
							"format": "uuid"
						}
					},
					"enrolled_on_plans": {
						"type": "array",
						"items": {
							"type": "string",
							"format": "uuid"
						}
					},
					"name": {
						"type": "string",
						"description": "Name of Policy"
					},
					"description": {
						"type": "string",
						"description": "Description of the Policy."
					},
					"created_at": {
						"type": "string",
						"description": "The Date-Time that this Policy was created on the server.",
						"format": "date-time"
					},
					"status": {
						"type": "string",
						"description": "The Status ID of a Policy.",
						"format": "uuid"
					},
					"status_history": {
						"$ref": "#/components/schemas/Policy_status_history"
					}
				}
			},
			"Balance": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"name": {
						"type": "string",
						"description": "Balance Name"
					},
					"balance_id": {
						"type": "string",
						"description": "ID of the balance",
						"format": "uuid"
					},
					"amount_cents": {
						"type": "integer",
						"description": "Balance Amount"
					}
				}
			},
			"CreditAdjustmentsExternalIDs": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string",
						"description": "External data key (IE `Vendor Name`),"
					},
					"value": {
						"type": "string",
						"description": "External data value (IE `World Bank`)."
					}
				},
				"description": "A lookup table of exertnal data values and IDs."
			},
			"Account_available_policy_sets": {
				"type": "object",
				"properties": {
					"policy_set_tye": {
						"type": "string",
						"enum": ["product", "plan", "promo"]
					},
					"id": {
						"type": "string",
						"format": "uuid"
					}
				},
				"description": "The ID to the specific grouping of policies (aka an ID to the plan, product, or opt in promos)."
			},
			"Account_default_policy_set": {
				"type": "object",
				"properties": {
					"policy_set_tye": {
						"type": "string",
						"enum": ["product", "plan"]
					},
					"id": {
						"type": "string",
						"format": "uuid"
					}
				},
				"description": "The default Plan or Product for this Account. NOTE: because promos are time based, the default must be either a Product or Plan."
			},
			"Account_current_policy_set": {
				"type": "object",
				"properties": {
					"policy_set_tye": {
						"type": "string",
						"enum": ["product", "plan", "promo"]
					},
					"id": {
						"type": "string",
						"format": "uuid"
					}
				},
				"description": "The current Plan, Promo, or Product for this Account."
			},
			"Account_external_account_ids": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "Name of the External Party"
					},
					"id": {
						"type": "string",
						"description": "External Account ID"
					}
				}
			},
			"LineItem_current_policy_set": {
				"type": "object",
				"properties": {
					"policy_set_type": {
						"type": "string",
						"enum": ["product", "plan", "promo"]
					},
					"id": {
						"type": "string",
						"format": "uuid"
					}
				},
				"description": "The current Plan, Promo, or Product for this Line Item (it is generally in sync with the account, except for purposefully grandfathered Line Items from previous account policy changes)."
			},
			"LineItem_merchantdata": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "merchant name"
					},
					"mcc": {
						"type": "string",
						"description": "mcc code of the merchant"
					},
					"address": {
						"type": "string",
						"description": "address of the merchant",
						"format": "address"
					},
					"phone": {
						"type": "string",
						"description": "phone number of merchant",
						"format": "phonenumber"
					},
					"etc": {
						"type": "object"
					}
				},
				"description": "the associated merchant data (if any) with this line item"
			},
			"Statement_general_summary": {
				"type": "object",
				"properties": {
					"product_name": {
						"type": "string"
					},
					"statement_id": {
						"type": "string",
						"format": "uuid"
					},
					"statement_date": {
						"type": "string",
						"description": "Date the statement cuts on",
						"format": "date-time"
					},
					"account_id": {
						"type": "string",
						"format": "uuid"
					},
					"statement_name": {
						"type": "string",
						"description": "informal name of the Statement. IE '2020-02'"
					},
					"external_account_id": {
						"type": "string",
						"description": "A reference to the Account ID of an external platform"
					},
					"statement_start_date": {
						"type": "string",
						"description": "Inclusive Start Date of a Statement",
						"format": "date-time"
					},
					"statement_end_date": {
						"type": "string",
						"description": "Exclusive End Date of a Statement",
						"format": "date-time"
					},
					"days_in_statement": {
						"type": "integer",
						"description": "Number of Days in a Statment"
					},
					"payment_due_date": {
						"type": "string",
						"description": "The Date-Time the minimum payment is due by.",
						"format": "date-time"
					},
					"total_min_pay_due_cents": {
						"type": "integer",
						"description": "The total amount owed (represented in cents) by the Account as caclulated by the min due balance."
					}
				},
				"description": "The base fields that describe this statment."
			},
			"Statement_account_summary": {
				"type": "object",
				"properties": {
					"previous_balance_cents": {
						"type": "integer",
						"description": "The previous Statement's ending balance in cents."
					},
					"new_balance_cents": {
						"type": "integer",
						"description": "The current Statement's ending balance in cents."
					},
					"payments_and_credits_cents": {
						"type": "integer",
						"description": "The total sum of Payments and Credits for this statement in cents."
					},
					"interest_accrued_cents": {
						"type": "integer",
						"description": "The total sum of Interest Accrued (in cents) for this statement."
					},
					"balance_transfers_cents": {
						"type": "integer",
						"description": "The total sum of Balance Transfers (in cents) for this statement."
					},
					"cash_advances_cents": {
						"type": "integer",
						"description": "The total sum of Cash Advances (in cents) for this statement in cents."
					},
					"charges_cents": {
						"type": "integer",
						"description": "The total sum of Charges (in cents) made for this statement in cents."
					},
					"fees_cents": {
						"type": "integer",
						"description": "The total sum of Fees (in cents) incurred for this statement in cents."
					},
					"available_credit_cents": {
						"type": "integer",
						"description": "The amount of money (in cents) that was available to be spent at the time of the statement cut."
					},
					"credit_limit_cents": {
						"type": "integer",
						"description": "The total oustanding amout of money (in cents) that the account could borrow."
					}
				},
				"description": "Summary of account activity."
			},
			"Statement_payments_and_credits_summary": {
				"type": "object",
				"properties": {
					"total_payments_cents": {
						"type": "integer",
						"description": "The total amount (in cents) of Payments made during the statement period."
					},
					"total_credits_cents": {
						"type": "integer",
						"description": "The total amount (in cents) of Credits made during the statement period."
					},
					"sum_cents": {
						"type": "integer",
						"description": "the sum of all payments and credits (in cents) for the given statement period."
					}
				}
			},
			"Statement_interest_details": {
				"type": "object",
				"properties": {
					"transaction_type": {
						"type": "string",
						"description": "The balance type, such as cash advance, regular, or promotional."
					},
					"transaciton_type_description": {
						"type": "string",
						"description": "An expanded description of the Transaction Type"
					},
					"apr": {
						"type": "number",
						"description": "The (decimal based) Annual Percentage Rate of the Interest. IE .08 or .001"
					},
					"balance_subject_to_interest_cents": {
						"type": "integer",
						"description": "The total amount borrowed (in cents) that is subject to this interest calculation."
					},
					"interest_charge_cents": {
						"type": "integer",
						"description": "The total amount (in cents) of Interest Charged for this interest calculation."
					},
					"min_pay_due_cents": {
						"type": "integer",
						"description": "The total amount (in cents) contributed to the Statment min pay due from this interest calculation."
					},
					"expiration_date": {
						"type": "string",
						"description": "The Date-Time when this interest calculation ends (if applicable).",
						"format": "date-time"
					}
				},
				"description": "Interest Charge Calculation"
			},
			"Product_edit_history": {
				"type": "object",
				"properties": {
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"edit": {
						"type": "object",
						"description": "edit"
					}
				},
				"description": "A time indexed list of edits to this Product"
			},
			"Plan_edit_history": {
				"type": "object",
				"properties": {
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"edit": {
						"type": "object",
						"description": "edit"
					}
				},
				"description": "A time indexed list of edits to this plan"
			},
			"Promo_edit_history": {
				"type": "object",
				"properties": {
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"edit": {
						"type": "object",
						"description": "edit"
					}
				},
				"description": "A time indexed list of edits to this Promo"
			},
			"BasePolicyConfig_min_pay": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"percentage": {
						"type": "number",
						"description": "the base base percentage calculated for min pay"
					},
					"value": {
						"type": "string",
						"description": "the value that is used for the base percentage of the min pay",
						"enum": [
							"statement ending amount",
							"statement sum of new charges plus statement previous ending amount"
						]
					},
					"additionals": {
						"type": "array",
						"description": "an array of things to add to the min pay after the percentage is calculated",
						"items": {
							"type": "string",
							"enum": [
								"statement new fees",
								"statement new interest",
								"statement oustanding fees",
								"statement outstanding interest"
							]
						}
					}
				},
				"description": "the min pay config"
			},
			"BasePolicyConfig_new_charge_grace_period": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"period": {
						"type": "string",
						"description": "the amount of time you want to not charge interest for a new charge. IE '5 days'",
						"format": "interval"
					},
					"separate_from_account_grace_period": {
						"type": "boolean",
						"description": "do you want to offer this grace period regardless of the account level graace period?"
					}
				},
				"description": "a grace period offered for each individual new charge"
			},
			"BasePolicyConfig_new_account_grace_period": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"period": {
						"type": "string",
						"description": "the amount of time you want to not charge interest from an accounts effective creation date. IE '90 days' (note this is separate from 0% apr promos)",
						"format": "interval"
					}
				},
				"description": "A grace period offered for a new account for all charges"
			},
			"BasePolicyConfig_billing_cycle": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean",
						"description": "Disabling the billing cycle means no statements, due dates, etc will be genereated"
					},
					"period": {
						"type": "string",
						"description": "the length of the billing cycle. after which a statement is generated, and a due date assigned. IE '1 month' '3 months' or '7 days' (most common is monthly)",
						"format": "interval"
					},
					"statement_cut_delay_interval": {
						"type": "string",
						"description": "the length of time you would like to wait before canopy creates statement data based on the cycle. IE '3 days'",
						"format": "interval"
					},
					"origination_date": {
						"type": "string",
						"description": "the origination date of this account",
						"format": "date-time"
					},
					"next_start_date": {
						"type": "string",
						"description": "date of the start of the next billing cycle",
						"format": "date-time"
					},
					"billing_due_date_interval": {
						"type": "string",
						"description": "the amount of time you would like between the statement cut and the billing due date. IE '25 days'.  Cannot exceed the start of the next billing cycle and generally needs to be at least 21 days.",
						"format": "interval"
					},
					"billing_grace_period": {
						"type": "string",
						"description": "the amount of time that you would like to wait after the due date before assigning a fee or potentially exiting the grace period. IE '3 days'",
						"format": "interval"
					}
				},
				"description": "The Billing Cycle Object"
			},
			"FeePolicyConfig_repeating_fees": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"recurrence": {
						"type": "string",
						"description": "the repeating Interval. IE '1 year' or '3 months'",
						"format": "interval"
					},
					"starting_offset": {
						"type": "string",
						"description": "the Interval to use to offset the start of this fee from the effective account creation. IE '90 days'",
						"format": "interval"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					}
				},
				"description": "An repeating fee for an account. IE commonly quarterly or yearly. Time is calculated from the account effective creation. IE you can have 2 yearly fees."
			},
			"FeePolicyConfig_account_fees_delinquent_account": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					}
				},
				"description": "Late fee assessed when account is placed in a delinquent status"
			},
			"FeePolicyConfig_account_fees": {
				"type": "object",
				"properties": {
					"delinquent_account": {
						"$ref": "#/components/schemas/FeePolicyConfig_account_fees_delinquent_account"
					}
				},
				"description": "An Object of fees based on account status."
			},
			"FeePolicyConfig_statement_fees_statement_balance_over_limit": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					}
				},
				"description": "Fee applied when total account balance is higher than credit limit (note requires account be opted into credit limit as soft limit)."
			},
			"FeePolicyConfig_statement_fees_late_payment": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"grace_period": {
						"type": "string",
						"description": "A grace period between when the money is due and when the fee is actually assessed. Example: Give the customer '3 days' past the due date before generating a fee.",
						"format": "interval"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					}
				},
				"description": "This fee is applied if a payment is not made or the entire minimum payment for the statemnt is not made by the statement due date and a potential grace period."
			},
			"FeePolicyConfig_statement_fees": {
				"type": "object",
				"properties": {
					"statement balance over limit": {
						"$ref": "#/components/schemas/FeePolicyConfig_statement_fees_statement_balance_over_limit"
					},
					"late payment": {
						"$ref": "#/components/schemas/FeePolicyConfig_statement_fees_late_payment"
					}
				},
				"description": "An Object of fees based on statement data."
			},
			"FeePolicyConfig_transaction_fees_completed_charge_amount_as_percentage": {
				"type": "object",
				"properties": {
					"percentage": {
						"type": "number",
						"description": "the percentage"
					},
					"floor_cents": {
						"type": "integer",
						"description": "the lower bound you would like set for the % in cents"
					},
					"ceiling_cents": {
						"type": "integer",
						"description": "the upper bound you would like set for the % in cents"
					}
				}
			},
			"FeePolicyConfig_transaction_fees_completed_charge": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					},
					"amount_as_percentage": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_completed_charge_amount_as_percentage"
					}
				},
				"description": "Fee applied when Charge is placed in a \"Posted\" status"
			},
			"FeePolicyConfig_transaction_fees_cash_advance": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					},
					"amount_as_percentage": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_completed_charge_amount_as_percentage"
					}
				},
				"description": "Cash advance Fee applied when a cash advance is made"
			},
			"FeePolicyConfig_transaction_fees_balance_transfer": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					},
					"amount_as_percentage": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_completed_charge_amount_as_percentage"
					}
				},
				"description": "Fee applied upon successful transfer of balance from another credit product"
			},
			"FeePolicyConfig_transaction_fees_payment_reversal": {
				"type": "object",
				"properties": {
					"enabled": {
						"type": "boolean"
					},
					"amount_cents": {
						"type": "integer",
						"description": "the monetary amount of the fee in cents."
					},
					"amount_as_percentage": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_completed_charge_amount_as_percentage"
					}
				},
				"description": "Fee applied upon successful recording of payment reversal"
			},
			"FeePolicyConfig_transaction_fees": {
				"type": "object",
				"properties": {
					"completed_charge": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_completed_charge"
					},
					"cash_advance": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_cash_advance"
					},
					"balance_transfer": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_balance_transfer"
					},
					"payment_reversal": {
						"$ref": "#/components/schemas/FeePolicyConfig_transaction_fees_payment_reversal"
					}
				},
				"description": "An Object of transaction based fees."
			},
			"Policy_status_history": {
				"type": "object",
				"properties": {
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"id": {
						"type": "string",
						"description": "the ID of the Policy Status",
						"format": "uuid"
					},
					"status": {
						"type": "string"
					}
				},
				"description": "A time indexed list of status changes to this Policy"
			},
			"Event": {
				"type": "object",
				"additionalProperties": false,
				"properties": {
					"event": {
						"type": "object",
						"additionalProperties": false,
						"properties": {
							"id": {
								"type": "string",
								"description": "The UUID of the event",
								"format": "uuid"
							},
							"timestamp": {
								"type": "string",
								"format": "date-time"
							}
						}
					}
				}
			}
		},
		"examples": {
			"Account": {
				"value": {
					"account_id": "d8c024b0-d5d8-4e9d-851c-08a4ebc355ec",
					"account_status_id": "81fa2e05-5cf8-425c-bdab-cc158420e0d3"
				}
			}
		},
		"requestBodies": {
			"AccountUpdate": {
				"description": "Input object for the account that is to be updated",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"$ref": "#/components/schemas/Account"
						}
					},
					"application/xml": {
						"schema": {
							"$ref": "#/components/schemas/Account"
						}
					}
				}
			},
			"DisputeUpdate": {
				"description": "Request object to update a dispute to a new status",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"required": ["status"],
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"status": {
									"type": "string",
									"description": "The New Status of the Dispute",
									"enum": ["cx_won", "cx_lost", "refunded"]
								},
								"effective_at": {
									"type": "string",
									"description": "The date this status change is effective (if empty, defaults to current). Note this is only used for the bookkeeping of disputes, it is not used in the actual workflow of the dispute resolution (we use the line item's effective dates for that).",
									"format": "date-time"
								}
							}
						}
					}
				}
			},
			"ChargeCreate": {
				"description": "Body of request to create charge",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Charge in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the charge should be recorded to the account. Although the charge is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								}
							}
						}
					}
				}
			},
			"PaymentCreate": {
				"description": "Body of request to create payment",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Payment in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the payment should be recorded to the account. Although the payment is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								}
							}
						}
					}
				}
			},
			"FeeCreate": {
				"description": "Body of request to create fee",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Fee in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the Fee should be recorded to the account. Although the Fee is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								}
							}
						}
					}
				}
			},
			"CashAdvanceCreate": {
				"description": "Body of request to create cash advance",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Cash Advance in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the Cash Advance should be recorded to the account. Although the Cash Advance is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								}
							}
						}
					}
				}
			},
			"AccountBalanceTransferCreate": {
				"description": "Body of request to create account balance transfer",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Balance Transfer in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the Balance Transfer should be recorded to the account. Although the Balance Transfer is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								}
							}
						}
					}
				}
			},
			"CreditAdjustmentCreate": {
				"description": "Body of request to create credit adjustment",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Credit Adjustment in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "the Date-Time that the Credit Adjustment should be recorded to the account. Although the Credit Adjustment is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								},
								"associated_line_items": {
									"type": "array",
									"description": "Array of related line items",
									"items": {
										"type": "string",
										"description": "line item ID",
										"format": "uuid"
									}
								},
								"type": {
									"type": "string",
									"description": "The type of credit adjustment",
									"enum": [
										"fee waiver",
										"principal offset",
										"provisional credit",
										"miscellaneous/other"
									]
								},
								"subtype": {
									"type": "string",
									"description": "The Subtype of Credit Adjustment"
								},
								"external_ids": {
									"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
								}
							}
						}
					}
				}
			},
			"DebitAdjustmentCreate": {
				"description": "Body of request to create debit adjustment",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Debit Adjustment in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "The Date-Time that the Debit Adjustment should be recorded to the account. Although the Debit Adjustment is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								},
								"associated_line_items": {
									"type": "array",
									"description": "Array of related line items",
									"items": {
										"type": "string",
										"description": "line item ID",
										"format": "uuid"
									}
								},
								"type": {
									"type": "string",
									"description": "The type of Debit Adjustment",
									"enum": [
										"interest offset",
										"principal offset",
										"provisional credit removal",
										"miscellaneous/other"
									]
								},
								"subtype": {
									"type": "string",
									"description": "The Subtype of Debit Adjustment"
								},
								"external_ids": {
									"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
								}
							}
						}
					}
				}
			},
			"ChargebackCreate": {
				"description": "Body of request to create chargeback",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Chargeback in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "the Date-Time that the Chargeback should be recorded to the account. Although the Chargeback is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								},
								"external_ids": {
									"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
								}
							}
						}
					}
				}
			},
			"RefundLineItemCreate": {
				"description": "Body of request to create refund of a line item",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Refund in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "the Date-Time that the Refund should be recorded to the account. Although the Refund is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								},
								"external_ids": {
									"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
								}
							}
						}
					}
				}
			},
			"PaymentReversalCreate": {
				"description": "Body of request to reverse a payment",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"additionalProperties": false,
							"properties": {
								"amount_cents": {
									"type": "integer",
									"description": "The Integer Amount of the Payment Reversal in Cents"
								},
								"effective_at": {
									"type": "string",
									"description": "the Date-Time that the Payment Reversal should be recorded to the account. Although the Payment Reversal is being added to Canopy today, it can actually be effective as of 10 days ago.",
									"format": "date-time"
								},
								"merchant_data": {
									"type": "object"
								},
								"user_id": {
									"type": "string",
									"format": "uuid"
								},
								"external_ids": {
									"$ref": "#/components/schemas/CreditAdjustmentsExternalIDs"
								}
							}
						}
					}
				}
			},
			"ProductCreate": {
				"description": "Body of request to create a product",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["name", "start_date", "type"],
							"additionalProperties": false,
							"properties": {
								"name": {
									"type": "string",
									"description": "The Name of the Product"
								},
								"type": {
									"type": "string",
									"description": "The Type of Product",
									"enum": ["line of credit", "credit", "installment"]
								},
								"start_date": {
									"type": "string",
									"description": "The Date-Time this Product becomes available for use",
									"format": "date-time"
								},
								"end_date": {
									"type": "string",
									"description": "The Date-Time this Product is no longer available for use",
									"format": "date-time"
								},
								"description": {
									"type": "string",
									"description": "Description of the Product."
								}
							}
						}
					}
				}
			},
			"PlanCreate": {
				"description": "Body of request to create a plan",
				"required": true,
				"content": {
					"application/json": {
						"schema": {
							"type": "object",
							"required": ["name", "start_date"],
							"additionalProperties": false,
							"properties": {
								"name": {
									"type": "string",
									"description": "The Name of the Plan"
								},
								"start_date": {
									"type": "string",
									"description": "The Date-Time this Plan becomes available for use",
									"format": "date-time"
								},
								"end_date": {
									"type": "string",
									"description": "The Date-Time this Plan is no longer available for use",
									"format": "date-time"
								},
								"description": {
									"type": "string",
									"description": "Description of the Plan."
								}
							}
						}
					}
				}
			}
		},
		"responses": {
			"AccountPolicies": {
				"description": "Array of Policy ID's",
				"content": {
					"application/json": {
						"schema": {
							"type": "array",
							"items": {
								"type": "string",
								"format": "uuid"
							}
						}
					}
				}
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "api_key",
				"in": "header"
			}
		}
	}
}
